import{_ as s,o as p,c as n,a4 as a}from"./chunks/framework.f8637b7f.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/Vue/V3/index.md","filePath":"Web/Vue/V3/index.md","lastUpdated":1715366628000}'),o={name:"Web/Vue/V3/index.md"},e=a(`<h2 id="重学vue3" tabindex="-1">重学vue3 <a class="header-anchor" href="#重学vue3" aria-label="Permalink to &quot;重学vue3&quot;">​</a></h2><p>在我之前工作中我发现我对于vue的理解是简单的，只能去做简单业务，或者将业务复杂化，并没有使用到vue很多功能带给我们的便利，所以我决定重新学习vue3，这次我会更加深入的学习vue3。</p><h3 id="_1-createapp" tabindex="-1">1.createApp <a class="header-anchor" href="#_1-createapp" aria-label="Permalink to &quot;1.createApp&quot;">​</a></h3><p>createApp是vue3的入口函数，我们可以通过createApp来创建一个vue实例，然后通过mount方法将vue实例挂载到dom上,如下所示：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//createApp类型</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rootComponent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rootProps</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(App) </span><span style="color:#6A737D;">// 创建一个vue实例</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> componetnInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// componentInstance是一个组件实例</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//createApp类型</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">(</span><span style="color:#E36209;">rootComponent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rootProps</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">(App) </span><span style="color:#6A737D;">// 创建一个vue实例</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> componetnInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// componentInstance是一个组件实例</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>createApp的参数</strong></p><ol><li>通过官方描述，我们可以知道可以在传入第一个参数为组件的前提前传入第二个参数，即为该组件的props，就可以去动态控制该组件的很多行为，目前当我封装全局组件比如Message的时候，通过传入props就可以很好的控制组件的行为。</li><li>当我们只传入一个参数，即为组件的时候，我们可以通过app.config.globalProperties去挂载全局属性和方法，这样我们就可以在组件中直接使用这些属性和方法，而不需要在组件中引入，这样就可以减少代码量，提高代码的可读性。</li><li>第一个参数不一定是我们通过vue创建的组件，因为组件其实就是一个对象，待续</li><li>createApp返回的是一个应用实例主要是挂载以及卸载的，如果我们想要获取到组件的实例，我们可以通过app._component来获取到组件的实例，不过只能获取组件的props并不能获取到组件的方法，</li><li>但是组件通过挂载之后返回的对象是一个组件实例，我们可以通过这个实例去获取到组件的方法，但是组件需要通过<strong>defineExpose</strong>暴露出来，才能在组件实例中获取到组件的方法。然后就可以通过方法去改变组件的行为。</li></ol><p>上面提到通过获取组件实例进而通过实例操作该组件的情况，严格来说我们应该在大部分情况尽可能的情况下使用props和emit来操作组件， 但是如果想通过对组件实例来操作组件的化，则子组件必须是optionsApi风格的vue组件，compositionApi的属性和方法默认是私有的必须通过defineProps主动暴露出来</p>`,8),l=[e];function t(r,c,i,y,E,u){return p(),n("div",null,l)}const d=s(o,[["render",t]]);export{m as __pageData,d as default};
