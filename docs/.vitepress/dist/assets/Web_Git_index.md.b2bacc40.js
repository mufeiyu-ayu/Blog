import{_ as s,o as a,c as e,a4 as n}from"./chunks/framework.f8637b7f.js";const f=JSON.parse('{"title":"Git 常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"Web/Git/index.md","filePath":"Web/Git/index.md","lastUpdated":1712198958000}'),t={name:"Web/Git/index.md"},l=n(`<h1 id="git-常用命令" tabindex="-1">Git 常用命令 <a class="header-anchor" href="#git-常用命令" aria-label="Permalink to &quot;Git 常用命令&quot;">​</a></h1><h2 id="合并远程仓库分支到本地分支" tabindex="-1">合并远程仓库分支到本地分支 <a class="header-anchor" href="#合并远程仓库分支到本地分支" aria-label="Permalink to &quot;合并远程仓库分支到本地分支&quot;">​</a></h2><ol><li>git pull</li></ol><p>【有风险】获取最新代码到本地，并自动合并到当前分支。 首先我们用命令行$git remote -v 去查询当前代码仓的远端分支； 然后直接去拉取并合并最新的代码（因为是直接合并，无法提前处理冲突，不推荐）； $ git pull origin master 即拉取远端 origin/master 分支并合并到当前分支； $ git pull origin test 即拉取远端 origin/test 分支并合并到当前分支。</p><ol start="2"><li><p>git fetch + merge （需要额外的本地分支） 首先我们用命令行$git remote -v 去查询当前代码仓的所有远端分支； 然后用命令行$git fetch origin dev:tempBranch 获取最新代码到本地临时分支（自定义为 tempBranch），获取到的远端分支为 origin/dev； 用命令行$git diff tempBranch去查看本地tempBranch分支和当前分支的版本差异； 接着用命令行$git merge tempBranch 合并本地临时分支 tempBranch 到当前分支； 最后用命令行$git branch -D tempBranch 来删除该临时分支； 不推荐这种方式，因为需要建立并删除这个额外的本地分支。</p></li><li><p>git fetch + merge （不额外建立本地分支） 首先我们用命令行$git remote -v 去查询当前代码仓的所有远端分支； 然后用命令行$git fetch origin dev 来获取远端的 origin/dev 分支的最新代码到本地（假设本地当前分支为 dev） 接着用命令行$git log -p dev..origin/dev 去查看本地dev分支和当前分支的版本差异； 最后用命令行$git merge origin/dev 来合并远端分支 origin/dev 到当前分支。 推荐这种方式，可以不用额外建立本地分支。</p></li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># git diff命令比较本地分支与远程分支之间的差异</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">diff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">local_branc</span><span style="color:#E1E4E8;">h</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">remote_branc</span><span style="color:#E1E4E8;">h</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;"># git diff dev origin/dev</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># git diff命令比较本地分支与远程分支之间的差异</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">local_branc</span><span style="color:#24292E;">h</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">remote_branc</span><span style="color:#24292E;">h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;"># git diff dev origin/dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6),o=[l];function i(p,r,c,d,g,h){return a(),e("div",null,o)}const y=s(t,[["render",i]]);export{f as __pageData,y as default};
