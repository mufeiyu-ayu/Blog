import{_ as e,o as r,c as t,a4 as n}from"./chunks/framework.c4ff8a6b.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/EqualityJudgment.md","filePath":"Web/JavaScript/EqualityJudgment.md","lastUpdated":1693864762000}'),a={name:"Web/JavaScript/EqualityJudgment.md"},o=n('<h2 id="相等-严格相等-通值相等" tabindex="-1">相等，严格相等，通值相等 <a class="header-anchor" href="#相等-严格相等-通值相等" aria-label="Permalink to &quot;相等，严格相等，通值相等&quot;">​</a></h2><p><strong>1.抽象等式比较算</strong></p><p>比较 x == y，其中 x 和 y 是值，产生<strong>true</strong>或 <strong>false</strong>。如下进行这样的比较：</p><ol><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 与<a href="./.html">Type</a> ( <em>y</em> ) 相同，则 <ol><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 为 undefined，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 为 Null，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">类型</a>( <em>x</em> ) 是数字，那么 <ol><li>如果<em>x</em>是<strong>NaN</strong>，则返回<strong>false</strong>。</li><li>如果<em>y</em>是<strong>NaN</strong>，则返回<strong>false</strong>。</li><li>如果<em>x 与 y</em>是相同的 Number 值，则返回<strong>true</strong>。</li><li>如果<em>x</em>为**+0<strong>且<em>y</em>为</strong>-0**，则返回<strong>true</strong>。</li><li>如果<em>x</em>为**-0<strong>且<em>y</em>为</strong>+0**，则返回<strong>true</strong>。</li><li>返回<strong>假</strong>。</li></ol></li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是字符串，则如果<em>x</em>和<em>y</em>是完全相同的字符序列（相同长度和对应位置的相同字符），则返回**true 。**否则，返回 <strong>false</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Boolean ，如果<em>x</em>和<em>y</em>都为 <strong>true</strong>或都为<strong>false ，则返回 true</strong>。否则，返回<strong>false</strong>。</li><li>如果<em>x</em>和<em>y</em>引用同一个对象，则返回<strong>true 。<strong>否则，返回</strong>false</strong>。</li></ol></li><li>如果<em>x</em>为<strong>null</strong>且*y***未定义**，则返回<strong>true</strong>。</li><li>如果*x***未定义<strong>且<em>y</em>为</strong>null** ，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Number 并且<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 是 String，则<br>返回比较结果<em>x</em> == <a href="https://262.ecma-international.org/5.1/#sec-9.3" target="_blank" rel="noreferrer">ToNumber</a> ( <em>y</em> )。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 String 并且<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 是 Number ，则<br>返回比较结果<a href="https://262.ecma-international.org/5.1/#sec-9.3" target="_blank" rel="noreferrer">ToNumber</a> ( <em>x</em> ) == <em>y</em>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Boolean ，则返回比较结果<a href="https://262.ecma-international.org/5.1/#sec-9.3" target="_blank" rel="noreferrer">ToNumber</a> ( <em>x</em> ) == <em>y</em>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 是 Boolean，则返回比较结果<em>x</em> == <a href="https://262.ecma-international.org/5.1/#sec-9.3" target="_blank" rel="noreferrer">ToNumber</a> ( <em>y</em> )。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 String 或 Number 并且<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 是 Object，则<br>返回比较结果<em>x</em> == <a href="https://262.ecma-international.org/5.1/#sec-9.1" target="_blank" rel="noreferrer">ToPrimitive</a> ( <em>y</em> )。 //将对象类型转化为非对象类型</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Object 并且<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 是 String 或 Number ，<br>则返回比较<a href="https://262.ecma-international.org/5.1/#sec-9.1" target="_blank" rel="noreferrer">ToPrimitive</a> ( <em>x</em> ) == <em>y</em>的结果。</li><li>返回<strong>假</strong>。</li></ol><p>注 1 鉴于上述平等的定义：</p><ul><li>可以通过以下方式强制进行字符串比较：<strong>&quot;&quot; + a == &quot;&quot; + b</strong>。</li><li>可以通过以下方式强制进行数字比较：<strong>+a == +b</strong>。</li><li>可以通过以下方式强制进行布尔比较：<strong>!a == !b</strong>.</li></ul><p>笔记 2 等式运算符保持以下不变量：</p><ul><li><strong>A</strong> <strong>!=</strong> <strong>B</strong>相当于**!(A** <strong>==</strong> <strong>B)</strong>。</li><li><strong>A</strong> <strong>==</strong> <strong>B</strong>等价于，除了和<strong>B</strong> <strong>==</strong> <strong>A</strong>的求值顺序。<strong>AB</strong></li></ul><p>注 3 等式运算符并不总是可传递的。例如，可能有两个不同的 String 对象，每个对象代表相同的 String 值；操作员会认为每个 String 对象都等于 String 值**==**，但两个 String 对象不会彼此相等。例如：</p><ul><li><strong>new String(&quot;a&quot;)</strong> <strong>==</strong> <strong>&quot;a&quot;<strong>并且</strong>&quot;a&quot;</strong> <strong>==</strong> <strong>new String(&quot;a&quot;)<strong>都是</strong>真实的</strong>。</li><li><strong>new String(&quot;a&quot;)</strong> <strong>==</strong> <strong>new String(&quot;a&quot;)<strong>是</strong>假</strong>的。</li></ul><p>注 4 字符串比较对代码单元值序列使用简单的相等性测试。没有尝试使用 Unicode 规范中定义的更复杂的、面向语义的字符或字符串相等和整理顺序定义。因此，根据 Unicode 标准规范相等的字符串值可以测试为不相等。实际上，这个算法假设两个字符串都已经是规范化的形式。</p><hr><p><strong>2.严格等于运算符 ( === )</strong></p><p>产生式 EqualityExpression <strong>: <strong>_EqualityExpression _</strong>===</strong> <em>RelationalExpression</em>的评估如下：</p><ol><li>令<em>lref</em>为评估<em>EqualityExpression</em>的结果。</li><li>令<em>lval</em>为<a href="https://262.ecma-international.org/5.1/#sec-8.7.1" target="_blank" rel="noreferrer">GetValue</a> ( <em>lref</em> )。</li><li>令<em>rref</em>为评估<em>RelationalExpression</em>的结果。</li><li>设<em>rval</em>为<a href="https://262.ecma-international.org/5.1/#sec-8.7.1" target="_blank" rel="noreferrer">GetValue</a> ( <em>rref</em> )。</li><li>返回执行严格相等比较的结果<em>rval</em> === <em>lval</em>。（见<a href="https://262.ecma-international.org/5.1/#sec-11.9.6" target="_blank" rel="noreferrer">11.9.6</a>）</li></ol><hr><p><strong>3.严格不等于运算符 ( !== )</strong></p><p>产生式 EqualityExpression <strong>: <strong>_EqualityExpression _</strong>!==</strong> <em>RelationalExpression</em>的评估如下：</p><ol><li>令<em>lref</em>为评估<em>EqualityExpression</em>的结果。</li><li>令<em>lval</em>为<a href="https://262.ecma-international.org/5.1/#sec-8.7.1" target="_blank" rel="noreferrer">GetValue</a> ( <em>lref</em> )。</li><li>令<em>rref</em>为评估<em>RelationalExpression</em>的结果。</li><li>设<em>rval</em>为<a href="https://262.ecma-international.org/5.1/#sec-8.7.1" target="_blank" rel="noreferrer">GetValue</a> ( <em>rref</em> )。</li><li>令<em>r</em>为执行严格相等比较<em>rval</em> === <em>lval</em>的结果。（见<a href="https://262.ecma-international.org/5.1/#sec-11.9.6" target="_blank" rel="noreferrer">11.9.6</a>）</li><li>如果<em>r</em>为<strong>true</strong>，则返回<strong>false</strong>。否则，返回<strong>true</strong>。</li></ol><hr><p><strong>4.严格等式比较算法</strong></p><p>比较 x === y（其中 x 和 y 是值）产生<strong>true</strong>或 <strong>false</strong>。如下进行这样的比较：</p><ol><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 与<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 不同，则返回 <strong>false</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 未定义，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 为 Null，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">类型</a>( <em>x</em> ) 是数字，那么 <ol><li>如果<em>x</em>是<strong>NaN</strong>，则返回<strong>false</strong>。</li><li>如果<em>y</em>是<strong>NaN</strong>，则返回<strong>false</strong>。</li><li>如果<em>x 与 y</em>是相同的 Number 值，则返回<strong>true</strong>。</li><li>如果<em>x</em>为**+0<strong>且<em>y</em>为</strong>-0**，则返回<strong>true</strong>。</li><li>如果<em>x</em>为**-0<strong>且<em>y</em>为</strong>+0**，则返回<strong>true</strong>。</li><li>返回<strong>假</strong>。</li></ol></li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 String ，则如果<em>x</em>和<em>y</em>是完全相同的字符序列（相同长度和对应位置的相同字符），则返回**true ；**否则，返回 <strong>false</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Boolean ，如果<em>x</em>和<em>y</em>都为<strong>true</strong>或都为<strong>false ，则返回 true</strong>；否则，返回<strong>false</strong>。</li><li>如果<em>x</em>和<em>y</em>引用同一个对象，则返回<strong>true 。<strong>否则，返回</strong>false</strong>。</li></ol><p>笔记该算法在处理有符号零和 NaN 方面<a href="https://262.ecma-international.org/5.1/#sec-9.12" target="_blank" rel="noreferrer">与 SameValue 算法 (9.12)不同。</a></p><hr><p><strong>5.The SameValue Algorithm</strong></p><p>内部比较抽象操作 SameValue( x , y )，其中 x 和 y 是 ECMAScript 语言值，产生<strong>true</strong>或<strong>false</strong>。如下进行这样的比较：</p><ol><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 与<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>y</em> ) 不同，则返回<strong>false</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 未定义，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 为 Null，则返回<strong>true</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Number，那么。 <ol><li>如果<em>x</em>是 NaN 并且<em>y</em>是 NaN，则返回<strong>true</strong>。</li><li>如果<em>x</em>为 +0 且<em>y</em>为 -0，则返回<strong>false</strong>。</li><li>如果<em>x</em>为 -0 且<em>y</em>为 +0，则返回<strong>false</strong>。</li><li>如果<em>x 与 y</em>是相同的 Number 值，则返回<strong>true</strong>。</li><li>返回<strong>假</strong>。</li></ol></li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 String ，则如果<em>x</em>和<em>y</em>是完全相同的字符序列（相同长度和对应位置的相同字符），则返回**true ；**否则，返回 <strong>false</strong>。</li><li>如果<a href="https://262.ecma-international.org/5.1/#sec-8" target="_blank" rel="noreferrer">Type</a> ( <em>x</em> ) 是 Boolean ，如果<em>x</em>和<em>y</em>都为<strong>true</strong>或都为<strong>false ，则返回 true</strong>；否则，返回<strong>false</strong>。</li><li><em>如果 x</em>和<em>y</em>引用同一个对象，则返回 true 。否则，返回<strong>false</strong>。</li></ol>',28),l=[o];function s(g,m,i,f,p,c){return r(),t("div",null,l)}const y=e(a,[["render",s]]);export{u as __pageData,y as default};
