import{_ as s,a as n,b as a,c as l}from"./chunks/v4.629bd95a.js";import{_ as p,o as e,c as o,a4 as t}from"./chunks/framework.f8637b7f.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/Vue/V3/index.md","filePath":"Web/Vue/V3/index.md","lastUpdated":1694183164000}'),r={name:"Web/Vue/V3/index.md"},c=t(`<h2 id="搭建一套规范的-vue3-x-项目工程环境" tabindex="-1">搭建一套规范的 Vue3.x 项目工程环境 <a class="header-anchor" href="#搭建一套规范的-vue3-x-项目工程环境" aria-label="Permalink to &quot;搭建一套规范的 Vue3.x 项目工程环境&quot;">​</a></h2><h3 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h3><ul><li>编程语言：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.typescriptlang.org%2Fzh%2F" target="_blank" rel="noreferrer">TypeScript 4.x</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.javascript.com%2F" target="_blank" rel="noreferrer">JavaScript</a></li><li>构建工具：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fcn.vitejs.dev%2F" target="_blank" rel="noreferrer">Vite 2.x</a></li><li>前端框架：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fv3.cn.vuejs.org%2F" target="_blank" rel="noreferrer">Vue 3.x</a></li><li>路由工具：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fnext.router.vuejs.org%2Fzh%2Findex.html" target="_blank" rel="noreferrer">Vue Router 4.x</a></li><li>状态管理：<a href="https://pinia.vuejs.org/" target="_blank" rel="noreferrer">Pinia</a></li><li>UI 框架：<a href="https://www.naiveui.com/" target="_blank" rel="noreferrer">Naive</a></li><li>CSS 预编译：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fstylus-lang.com%2F" target="_blank" rel="noreferrer">Stylus</a> / <a href="https://link.juejin.cn/?target=https%3A%2F%2Fsass.bootcss.com%2Fdocumentation" target="_blank" rel="noreferrer">Sass</a> / <a href="https://link.juejin.cn/?target=http%3A%2F%2Flesscss.cn%2F" target="_blank" rel="noreferrer">Less</a></li><li>HTTP 工具：<a href="https://link.juejin.cn/?target=https%3A%2F%2Faxios-http.com%2F" target="_blank" rel="noreferrer">Axios</a></li><li>Git Hook 工具：<a href="https://link.juejin.cn/?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F" target="_blank" rel="noreferrer">husky</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fokonet%2Flint-staged" target="_blank" rel="noreferrer">lint-staged</a></li><li>代码规范：<a href="https://link.juejin.cn/?target=http%3A%2F%2Feditorconfig.org" target="_blank" rel="noreferrer">EditorConfig</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fprettier.io%2F" target="_blank" rel="noreferrer">Prettier</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Feslint.org%2F" target="_blank" rel="noreferrer">ESLint</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fairbnb%2Fjavascript%23translation" target="_blank" rel="noreferrer">Airbnb JavaScript Style Guide</a></li><li>提交规范：<a href="https://link.juejin.cn/?target=http%3A%2F%2Fcommitizen.github.io%2Fcz-cli%2F" target="_blank" rel="noreferrer">Commitizen</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fcommitlint.js.org%2F%23%2F" target="_blank" rel="noreferrer">Commitlint</a></li><li>单元测试：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fnext.vue-test-utils.vuejs.org%2F" target="_blank" rel="noreferrer">vue-test-utils</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fjestjs.io%2F" target="_blank" rel="noreferrer">jest</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-jest" target="_blank" rel="noreferrer">vue-jest</a> + <a href="https://link.juejin.cn/?target=https%3A%2F%2Fkulshekhar.github.io%2Fts-jest%2F" target="_blank" rel="noreferrer">ts-jest</a></li><li>自动部署：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions" target="_blank" rel="noreferrer">GitHub Actions</a></li></ul><h3 id="架构搭建" tabindex="-1">架构搭建 <a class="header-anchor" href="#架构搭建" aria-label="Permalink to &quot;架构搭建&quot;">​</a></h3><p>请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，<strong>需要 Node.js 版本 &gt;= 12.0.0</strong>。<br>查看 Node.js 版本：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>建议将 Node.js 升级到最新的稳定版本：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 使用 nvm 安装最新稳定版 Node.js</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 使用 nvm 安装最新稳定版 Node.js</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stable</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="使用-vue-cli-快速初始化项目雏形" tabindex="-1">使用 vue-cli 快速初始化项目雏形 <a class="header-anchor" href="#使用-vue-cli-快速初始化项目雏形" aria-label="Permalink to &quot;使用 vue-cli 快速初始化项目雏形&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># vue-cli的版本&gt;=?</span></span>
<span class="line"><span style="color:#B392F0;">vue</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">navie-mall</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 选择vue的版本</span></span>
<span class="line"><span style="color:#6A737D;"># 选择babel编译ts/js代码</span></span>
<span class="line"><span style="color:#6A737D;"># 选择ts</span></span>
<span class="line"><span style="color:#6A737D;"># 选择vue-router</span></span>
<span class="line"><span style="color:#6A737D;"># 选择css预编译工具</span></span>
<span class="line"><span style="color:#6A737D;"># 选择代码格式化工具</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># vue-cli的版本&gt;=?</span></span>
<span class="line"><span style="color:#6F42C1;">vue</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">navie-mall</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 选择vue的版本</span></span>
<span class="line"><span style="color:#6A737D;"># 选择babel编译ts/js代码</span></span>
<span class="line"><span style="color:#6A737D;"># 选择ts</span></span>
<span class="line"><span style="color:#6A737D;"># 选择vue-router</span></span>
<span class="line"><span style="color:#6A737D;"># 选择css预编译工具</span></span>
<span class="line"><span style="color:#6A737D;"># 选择代码格式化工具</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><img src="`+s+`" alt="images"><br>然后按照终端提示完成以下操作：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Choose</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Vue.js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">you</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">want</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">project</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span></span>
<span class="line"><span style="color:#B392F0;">3.x</span></span>
<span class="line"><span style="color:#B392F0;">Use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">class-style</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">component</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">syntax?</span></span>
<span class="line"><span style="color:#B392F0;">N</span></span>
<span class="line"><span style="color:#B392F0;">Use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Babel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alongside</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TypeScript</span><span style="color:#E1E4E8;"> (required </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">modern</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mode,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">auto-detected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polyfi</span></span>
<span class="line"><span style="color:#B392F0;">lls,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">transpiling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">JSX</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#B392F0;">Y</span></span>
<span class="line"><span style="color:#B392F0;">Use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">history</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mode</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">router?</span><span style="color:#E1E4E8;"> (Requires </span><span style="color:#9ECBFF;">proper</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fallback</span></span>
<span class="line"><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> production)</span></span>
<span class="line"><span style="color:#B392F0;">N</span></span>
<span class="line"><span style="color:#B392F0;">Pick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CSS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pre-processor</span><span style="color:#E1E4E8;"> (PostCSS, </span><span style="color:#9ECBFF;">Autoprefixer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CSS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Modules</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">are</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">supported</span></span>
<span class="line"><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">Sass/SCSS</span><span style="color:#E1E4E8;"> (with </span><span style="color:#9ECBFF;">node-sass</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Choose</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Vue.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">you</span><span style="color:#24292E;"> </span><span style="color:#032F62;">want</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">project</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span></span>
<span class="line"><span style="color:#6F42C1;">3.x</span></span>
<span class="line"><span style="color:#6F42C1;">Use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">class-style</span><span style="color:#24292E;"> </span><span style="color:#032F62;">component</span><span style="color:#24292E;"> </span><span style="color:#032F62;">syntax?</span></span>
<span class="line"><span style="color:#6F42C1;">N</span></span>
<span class="line"><span style="color:#6F42C1;">Use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Babel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alongside</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TypeScript</span><span style="color:#24292E;"> (required </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">modern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mode,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">auto-detected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polyfi</span></span>
<span class="line"><span style="color:#6F42C1;">lls,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">transpiling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JSX</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#6F42C1;">Y</span></span>
<span class="line"><span style="color:#6F42C1;">Use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">history</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mode</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">router?</span><span style="color:#24292E;"> (Requires </span><span style="color:#032F62;">proper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setup</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fallback</span></span>
<span class="line"><span style="color:#D73A49;">in</span><span style="color:#24292E;"> production)</span></span>
<span class="line"><span style="color:#6F42C1;">N</span></span>
<span class="line"><span style="color:#6F42C1;">Pick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CSS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pre-processor</span><span style="color:#24292E;"> (PostCSS, </span><span style="color:#032F62;">Autoprefixer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CSS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Modules</span><span style="color:#24292E;"> </span><span style="color:#032F62;">are</span><span style="color:#24292E;"> </span><span style="color:#032F62;">supported</span></span>
<span class="line"><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">Sass/SCSS</span><span style="color:#24292E;"> (with </span><span style="color:#032F62;">node-sass</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>启动项目 npm run serve，访问 <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a>，如下图：<br><img src="`+n+`" alt="images">表示 Webpack + Vue3 + TypeScript + Vue Router 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Pinia、Navie UI、Axios、Sass。</p><h3 id="修改-vue-config-配置文件" tabindex="-1">修改 vue.config 配置文件 <a class="header-anchor" href="#修改-vue-config-配置文件" aria-label="Permalink to &quot;修改 vue.config 配置文件&quot;">​</a></h3><p>配置文件 vue.config.ts 位于根目录下，项目启动时会自动读取。<br>本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。</p><h3 id="规范目录结构" tabindex="-1">规范目录结构 <a class="header-anchor" href="#规范目录结构" aria-label="Permalink to &quot;规范目录结构&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">publish/</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assets/</span><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">静态资源目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">common/</span><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">通用类库目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">components/</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">公共组件目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">router/</span><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">路由配置目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">store/</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">状态管理目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">style/</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">通用</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CSS</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">utils/</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">工具函数目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">views/</span><span style="color:#E1E4E8;">                     </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">页面组件目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">App.vue</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shims-vue.d.ts</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests/</span><span style="color:#E1E4E8;">                         </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">单元测试目录</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.html</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tsconfig.json</span><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TypeScript</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">配置文件</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vue.config.ts</span><span style="color:#E1E4E8;">                  </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Vue</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">配置文件</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">publish/</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assets/</span><span style="color:#24292E;">                    </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">静态资源目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">common/</span><span style="color:#24292E;">                    </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通用类库目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">components/</span><span style="color:#24292E;">                </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">公共组件目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">router/</span><span style="color:#24292E;">                    </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">路由配置目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">store/</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">状态管理目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">style/</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通用</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CSS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">utils/</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">工具函数目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">views/</span><span style="color:#24292E;">                     </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">页面组件目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">App.vue</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.ts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shims-vue.d.ts</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests/</span><span style="color:#24292E;">                         </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">单元测试目录</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.html</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsconfig.json</span><span style="color:#24292E;">                  </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TypeScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">配置文件</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vue.config.ts</span><span style="color:#24292E;">                  </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Vue</span><span style="color:#24292E;"> </span><span style="color:#032F62;">配置文件</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="集成状态管理工具-pinia" tabindex="-1">集成状态管理工具 Pinia <a class="header-anchor" href="#集成状态管理工具-pinia" aria-label="Permalink to &quot;集成状态管理工具 Pinia&quot;">​</a></h3><ol><li>安装支持 Vue3 的状态管理工具</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pinia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-S</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pinia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><p>创建 src/store/index.ts 文件</p><p>在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：</p></li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stores/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.ts</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">配置文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stores/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.ts</span><span style="color:#24292E;">  </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">store</span><span style="color:#24292E;"> </span><span style="color:#032F62;">配置文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {defineStore} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">useMainStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineStore</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">state</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({}),</span></span>
<span class="line"><span style="color:#E1E4E8;">	getters: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">	actions: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {defineStore} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">useMainStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineStore</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;main&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">state</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({}),</span></span>
<span class="line"><span style="color:#24292E;">	getters: {},</span></span>
<span class="line"><span style="color:#24292E;">	actions: {},</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="3"><li>在 main.ts 文件中挂载 Vuex 配置</li></ol><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {createApp} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {createPinia} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Pinia&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pinia</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPinia</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(App)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(pinia)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {createApp} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {createPinia} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Pinia&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pinia</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPinia</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">(App)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(pinia)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="4"><li>在组件中如何使用</li></ol><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {useUserStore} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/stores/main&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useUserStore</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {useUserStore} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/stores/main&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useUserStore</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="集成-ui-框架-naive" tabindex="-1">集成 UI 框架 Naive <a class="header-anchor" href="#集成-ui-框架-naive" aria-label="Permalink to &quot;集成 UI 框架 Naive&quot;">​</a></h3><ol><li>安装支持 Vue3 的 UI 框架</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">naive-ui</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vfonts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">naive-ui</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vfonts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>在 main.ts 文件中挂载 Naive</li></ol><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 按需全局安装组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {createApp} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {create, NButton} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;naive-ui&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">naive</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	components: [NButton],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(naive)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 按需全局安装组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {createApp} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {create, NButton} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;naive-ui&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">naive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	components: [NButton],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(naive)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>你可以这样在 SFC 中使用你安装的组件。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">n-button</span><span style="color:#E1E4E8;">&gt;naive-ui&lt;/</span><span style="color:#85E89D;">n-button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">n-button</span><span style="color:#24292E;">&gt;naive-ui&lt;/</span><span style="color:#22863A;">n-button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="集成-http-工具-axios" tabindex="-1">集成 HTTP 工具 Axios <a class="header-anchor" href="#集成-http-工具-axios" aria-label="Permalink to &quot;集成 HTTP 工具 Axios&quot;">​</a></h3><ol><li>安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）</li><li>配置 Axios <blockquote><p>为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。</p></blockquote></li></ol><p>Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">utils/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">axios.ts</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Axios</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">配置文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">utils/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">axios.ts</span><span style="color:#24292E;">  </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Axios</span><span style="color:#24292E;"> </span><span style="color:#032F62;">配置文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {useMessage} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;navie&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseURL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://api.github.com&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useMessage</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">axios</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Axios.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	baseURL,</span></span>
<span class="line"><span style="color:#E1E4E8;">	timeout: </span><span style="color:#79B8FF;">20000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 请求超时 20s</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 前置拦截器（发起请求之前的拦截）</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">		 * 根据你的项目实际情况来对 config 做处理</span></span>
<span class="line"><span style="color:#6A737D;">		 * 这里对 config 不做任何处理，直接返回</span></span>
<span class="line"><span style="color:#6A737D;">		 */</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 后置拦截器（获取到响应时的拦截）</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">		 * 根据你的项目实际情况来对 response 和 error 做处理</span></span>
<span class="line"><span style="color:#6A737D;">		 * 这里对 response 和 error 不做任何处理，直接返回</span></span>
<span class="line"><span style="color:#6A737D;">		 */</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error.response </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> error.response.data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> error.response.status</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">msg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> error.response.data.message</span></span>
<span class="line"><span style="color:#E1E4E8;">			Message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Code: \${</span><span style="color:#E1E4E8;">code</span><span style="color:#9ECBFF;">}, Message: \${</span><span style="color:#E1E4E8;">msg</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`[Axios Error]\`</span><span style="color:#E1E4E8;">, error.response)</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			Message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">error</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> axios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {useMessage} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;navie&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseURL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://api.github.com&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useMessage</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">axios</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Axios.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	baseURL,</span></span>
<span class="line"><span style="color:#24292E;">	timeout: </span><span style="color:#005CC5;">20000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 请求超时 20s</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 前置拦截器（发起请求之前的拦截）</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	(</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">		 * 根据你的项目实际情况来对 config 做处理</span></span>
<span class="line"><span style="color:#6A737D;">		 * 这里对 config 不做任何处理，直接返回</span></span>
<span class="line"><span style="color:#6A737D;">		 */</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	(</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 后置拦截器（获取到响应时的拦截）</span></span>
<span class="line"><span style="color:#24292E;">axios.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	(</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">		 * 根据你的项目实际情况来对 response 和 error 做处理</span></span>
<span class="line"><span style="color:#6A737D;">		 * 这里对 response 和 error 不做任何处理，直接返回</span></span>
<span class="line"><span style="color:#6A737D;">		 */</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	(</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error.response </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> error.response.data) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> error.response.status</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">msg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> error.response.data.message</span></span>
<span class="line"><span style="color:#24292E;">			Message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Code: \${</span><span style="color:#24292E;">code</span><span style="color:#032F62;">}, Message: \${</span><span style="color:#24292E;">msg</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`[Axios Error]\`</span><span style="color:#24292E;">, error.response)</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			Message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">error</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><ol start="3"><li>使用 Axios 在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：</li></ol><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {defineComponent} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../utils/axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		axios</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users/XPoet&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;res: &#39;</span><span style="color:#E1E4E8;">, res)</span></span>
<span class="line"><span style="color:#E1E4E8;">			})</span></span>
<span class="line"><span style="color:#E1E4E8;">			.</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;err: &#39;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			})</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {defineComponent} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../utils/axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineComponent</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		axios</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/users/XPoet&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;res: &#39;</span><span style="color:#24292E;">, res)</span></span>
<span class="line"><span style="color:#24292E;">			})</span></span>
<span class="line"><span style="color:#24292E;">			.</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;err: &#39;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">			})</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>至此，一个基于 TypeScript + Webpack + Vue3 + Vue Router + Pinia + Navie + Axios + Sass 的前端项目开发环境搭建完毕。<br>下面我们来增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。</p><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h2><p>随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。<br>下面讲解如何使用 <strong>EditorConfig + Prettier + ESLint</strong> 组合来实现代码规范化。<br>这样做带来好处：</p><ul><li>解决团队之间代码不规范导致的可读性差和可维护性差的问题。</li><li>解决团队成员不同编辑器导致的编码规范不统一问题。</li><li>提前发现代码风格问题，给出对应规范提示，及时修复。</li><li>减少代码审查过程中反反复复的修改过程，节约时间。</li><li>自动格式化，统一编码风格，从此和脏乱差的代码说再见。</li></ul><h3 id="集成-editorconfig-配置" tabindex="-1">集成 EditorConfig 配置 <a class="header-anchor" href="#集成-editorconfig-配置" aria-label="Permalink to &quot;集成 EditorConfig 配置&quot;">​</a></h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。<br>官网：editorconfig.org<br>在项目根目录下增加 .editorconfig 文件：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># Editor configuration, see http://editorconfig.org</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># 表示是最顶层的 EditorConfig 配置文件</span></span>
<span class="line"><span style="color:#e1e4e8;">root = true</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">[*] # 表示所有文件适用</span></span>
<span class="line"><span style="color:#e1e4e8;">charset = utf-8 # 设置文件字符集为 utf-8</span></span>
<span class="line"><span style="color:#e1e4e8;">indent_style = space # 缩进风格（tab | space）</span></span>
<span class="line"><span style="color:#e1e4e8;">indent_size = 2 # 缩进大小</span></span>
<span class="line"><span style="color:#e1e4e8;">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="color:#e1e4e8;">trim_trailing_whitespace = true # 去除行首的任意空白字符</span></span>
<span class="line"><span style="color:#e1e4e8;">insert_final_newline = true # 始终在文件末尾插入一个新行</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">[*.md] # 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span style="color:#e1e4e8;">max_line_length = off</span></span>
<span class="line"><span style="color:#e1e4e8;">trim_trailing_whitespace = false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># Editor configuration, see http://editorconfig.org</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 表示是最顶层的 EditorConfig 配置文件</span></span>
<span class="line"><span style="color:#24292e;">root = true</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[*] # 表示所有文件适用</span></span>
<span class="line"><span style="color:#24292e;">charset = utf-8 # 设置文件字符集为 utf-8</span></span>
<span class="line"><span style="color:#24292e;">indent_style = space # 缩进风格（tab | space）</span></span>
<span class="line"><span style="color:#24292e;">indent_size = 2 # 缩进大小</span></span>
<span class="line"><span style="color:#24292e;">end_of_line = lf # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="color:#24292e;">trim_trailing_whitespace = true # 去除行首的任意空白字符</span></span>
<span class="line"><span style="color:#24292e;">insert_final_newline = true # 始终在文件末尾插入一个新行</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[*.md] # 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span style="color:#24292e;">max_line_length = off</span></span>
<span class="line"><span style="color:#24292e;">trim_trailing_whitespace = false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>注意：</p><ul><li>VSCode 使用 EditorConfig 需要去插件市场下载插件 <strong>EditorConfig for VS Code</strong> 。<img src="`+a+`" alt="images"></li><li>JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。</li></ul><h3 id="集成-prettier-配置" tabindex="-1">集成 Prettier 配置 <a class="header-anchor" href="#集成-prettier-配置" aria-label="Permalink to &quot;集成 Prettier 配置&quot;">​</a></h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。<br>官网：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fprettier.io%2F" target="_blank" rel="noreferrer">prettier.io/</a></p><ol><li>安装 Prettier</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prettier</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prettier</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>创建 Prettier 配置文件</li></ol><p>Prettier 支持多种格式的<a href="https://link.juejin.cn/?target=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Fconfiguration.html" target="_blank" rel="noreferrer">配置文件</a>，比如 .json、.yml、.yaml、.js 等。<br>在本项目根目录下创建 .prettierrc 文件。</p><ol start="3"><li>配置 .prettierrc 在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fprettier.io%2Fdocs%2Fen%2Foptions.html" target="_blank" rel="noreferrer">Prettier-Options</a> 。</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;useTabs&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;tabWidth&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;printWidth&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;singleQuote&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;trailingComma&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;none&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;bracketSpacing&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;semi&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;useTabs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;tabWidth&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;printWidth&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;singleQuote&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;trailingComma&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;none&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;bracketSpacing&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;semi&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li>Prettier 安装且配置好之后，就能使用命令来格式化代码</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 格式化所有文件（. 表示所有文件）</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prettier</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--write</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 格式化所有文件（. 表示所有文件）</span></span>
<span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prettier</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--write</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意：</p><ul><li>VSCode 编辑器使用 Prettier 配置需要下载插件 <strong>Prettier - Code formatter</strong> 。</li></ul><p><img src="`+l+`" alt="images"></p><ul><li>JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。</li></ul><p>Prettier 配置好以后，在使用 VSCode 或 WebStorm 等编辑器的格式化功能时，编辑器就会按照 Prettier 配置文件的规则来进行格式化，避免了因为大家编辑器配置不一样而导致格式化后的代码风格不统一的问题。</p><h3 id="解决-prettier-和-eslint-的冲突" tabindex="-1">解决 Prettier 和 ESLint 的冲突 <a class="header-anchor" href="#解决-prettier-和-eslint-的冲突" aria-label="Permalink to &quot;解决 Prettier 和 ESLint 的冲突&quot;">​</a></h3><p>通常大家会在项目中根据实际情况添加一些额外的 ESLint 和 Prettier 配置规则，难免会存在规则冲突情况。<br>项目中的 ESLint 配置中使用了 Airbnb JavaScript 风格指南校验，其规则之一是<em>代码结束后面要加分号</em>，而我们在 Prettier 配置文件中加了<em>代码结束后面不加分号</em>的配置项，这样就有冲突了，会出现用 Prettier 格式化后的代码，ESLint 检测到格式有问题的，从而抛出错误提示。<br>解决两者冲突问题，需要用到 <strong>eslint-plugin-prettier</strong> 和 <strong>eslint-config-prettier</strong>。</p><ul><li>eslint-plugin-prettier 将 Prettier 的规则设置到 ESLint 的规则中。</li><li>eslint-config-prettier 关闭 ESLint 中与 Prettier 中会发生冲突的规则。</li></ul><p>最后形成优先级：Prettier 配置规则 &gt; ESLint 配置规则。</p><ul><li>安装插件</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint-plugin-prettier</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">eslint-config-prettier</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint-plugin-prettier</span><span style="color:#24292E;"> </span><span style="color:#032F62;">eslint-config-prettier</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在 .eslintrc.js 添加 prettier 插件</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;plugin:vue/essential&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;airbnb-base&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;plugin:prettier/recommended&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 添加 prettier 插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  extends: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;plugin:vue/essential&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;airbnb-base&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;plugin:prettier/recommended&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 添加 prettier 插件</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样，我们在执行 eslint --fix 命令时，ESLint 就会按照 Prettier 的配置规则来格式化代码，轻松解决二者冲突问题。</p><h3 id="集成-husky-和-lint-staged" tabindex="-1">集成 husky 和 lint-staged <a class="header-anchor" href="#集成-husky-和-lint-staged" aria-label="Permalink to &quot;集成 husky 和 lint-staged&quot;">​</a></h3><h4 id="配置-husky" tabindex="-1">配置 husky <a class="header-anchor" href="#配置-husky" aria-label="Permalink to &quot;配置 husky&quot;">​</a></h4><p>使用 <code>husky-init</code> 命令快速在项目初始化一个 husky 配置。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky-init</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky-init</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行命令做了四件事：</p><ol><li>安装 husky 到开发依赖</li><li>在项目根目录下创建 <code>.husky</code> 目录</li><li>在 <code>.husky</code> 目录创建 <code>pre-commit</code> hook，并初始化 <code>pre-commit</code> 命令为 <code>npm test</code></li><li>修改 <code>package.json</code> 的 <code>scripts</code>，增加 <code>&quot;prepare&quot;: &quot;husky install&quot;</code></li></ol><blockquote><p>**特别注意：本项目使用 husky 6.x 版本，6.x 版本配置方式跟之前的版本有较大差异。目前网上大部分有关 husky 的教程都是 6 以前的版本 ，当发现配置方法不一致时，一切以 **<a href="https://link.juejin.cn?target=https%3A%2F%2Ftypicode.github.io%2Fhusky%2F%23%2F%3Fid%3Dusage" target="_blank" rel="noreferrer"><strong>husky 官网</strong></a><strong>为准。</strong></p></blockquote><p>到这里，husky 配置完毕，现在我们来使用它：<br>husky 包含很多 <code>hook</code>（钩子），常用有：<code>pre-commit</code>、<code>commit-msg</code>、<code>pre-push</code>。这里，我们使用 <code>pre-commit</code> 来触发 ESLint 命令。<br>修改 <code>.husky/pre-commit</code> hook 文件的触发命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">eslint</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--fix</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./src</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ext</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.vue,.js,.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">eslint</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--fix</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./src</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ext</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.vue,.js,.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面这个 <code>pre-commit</code> hook 文件的作用是：当我们执行 <code>git commit -m &quot;xxx&quot;</code> 时，会先对 <code>src</code> 目录下所有的 <code>.vue</code>、<code>.js</code>、<code>.ts</code> 文件执行 <code>eslint --fix</code> 命令，如果 ESLint 通过，成功 <code>commit</code>，否则终止 <code>commit</code>。</p><p>但是又存在一个问题：有时候我们明明只改动了一两个文件，却要对所有的文件执行 <code>eslint --fix</code>。假如这是一个历史项目，我们在中途配置了 ESLint 规则，那么在提交代码时，也会对其他未修改的“历史”文件都进行检查，可能会造成大量文件出现 ESLint 错误，显然不是我们想要的结果。</p><p>我们要做到只用 ESLint 修复自己此次写的代码，而不去影响其他的代码。所以我们还需借助一个神奇的工具 <strong>lint-staged</strong> 。</p><h4 id="配置-lint-staged" tabindex="-1">配置 lint-staged <a class="header-anchor" href="#配置-lint-staged" aria-label="Permalink to &quot;配置 lint-staged&quot;">​</a></h4><p>lint-staged 这个工具一般结合 husky 来使用，它可以让 husky 的 <code>hook</code> 触发的命令只作用于 <code>git add</code>那些文件（即 git 暂存区的文件），而不会影响到其他文件。</p><p>接下来，我们使用 lint-staged 继续优化项目。</p><ol><li>安装 lint-staged</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lint-staged</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lint-staged</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>在 <code>package.json</code>里增加 lint-staged 配置项 <br>这行命令表示：只对 git 暂存区的 <code>.vue</code>、<code>.js</code>、<code>.ts</code> 文件执行 <code>eslint --fix</code>。</li></ol><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;lint-staged&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;*.{vue,js,ts}&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;lint-staged&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;*.{vue,js,ts}&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;eslint --fix&quot;</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>修改 <code>.husky/pre-commit</code> hook 的触发命令为：<code>npx lint-staged</code></li></ol><p>至此，husky 和 lint-staged 组合配置完成。</p><p>现在我们提交代码时就会变成这样：</p><p>假如我们修改了 <code>scr</code> 目录下的 <code>test-1.js</code>、<code>test-2.ts</code> 和 <code>test-3.md</code> 文件，然后 <code>git add ./src/</code>，最后 <code>git commit -m &quot;test...&quot;</code>，这时候就会只对 <code>test-1.js</code>、<code>test-2.ts</code> 这两个文件执行 <code>eslint --fix</code>。如果 ESLint 通过，成功提交，否则终止提交。从而保证了我们提交到 Git 仓库的代码都是规范的。</p><ul><li>提交前 <code>test-1.js</code>、<code>test-2.ts</code></li><li>提交后 <code>test-1.js</code>、<code>test-2.ts</code> 自动修复代码格式</li></ul><p>无论写代码还是做其他事情，都应该用长远的眼光来看，刚开始使用 ESint 的时候可能会有很多问题，改起来也很费时费力，只要坚持下去，代码质量和开发效率都会得到提升，前期的付出都是值得的。</p><p>这些工具并不是必须的，没有它们你同样可以可以完成功能开发，但是利用好这些工具，你可以写出更高质量的代码。特别是一些刚刚接触的人，可能会觉得麻烦而放弃使用这些工具，失去了一次提升编程能力的好机会。</p><h2 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-label="Permalink to &quot;提交规范&quot;">​</a></h2><p>前面我们已经统一代码规范，并且在提交代码时进行强约束来保证仓库代码质量。多人协作的项目中，在提交代码这个环节，也存在一种情况：不能保证每个人对提交信息的准确描述，因此会出现提交信息紊乱、风格不一致的情况。<br>如果 git commit 的描述信息精准，在后期维护和 Bug 处理时会变得有据可查，项目开发周期内还可以根据规范的提交信息快速生成开发日志，从而方便我们追踪项目和把控进度。<br>这里，我们使用社区最流行、最知名、最受认可的 Angular 团队提交规范。<br>先看看 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fangular%2Fangular%2Fcommits%2Fmaster" target="_blank" rel="noreferrer">Angular 项目的提交记录</a>：</p><p>如上图，可以看出这些提交信息都是有固定格式的，下面我们来学习 Angular 规范的 commit message 格式。</p><h3 id="commit-message-格式规范" tabindex="-1">commit message 格式规范 <a class="header-anchor" href="#commit-message-格式规范" aria-label="Permalink to &quot;commit message 格式规范&quot;">​</a></h3><p>commit message 由 Header、Body、Footer 组成。<br>&lt;Header&gt; &lt;Body&gt; &lt;Footer&gt;</p><h4 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h4><p>Header 部分包括三个字段 type（必需）、scope（可选）和 subject（必需）。<br>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</p><h5 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h5><p>type 用于说明 commit 的提交类型（必须是以下几种之一）。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增一个功能</td></tr><tr><td>fix</td><td>修复一个 Bug</td></tr><tr><td>docs</td><td>文档变更</td></tr><tr><td>style</td><td>代码格式（不影响功能，例如空格、分号等格式修正）</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>perf</td><td>改善性能</td></tr><tr><td>test</td><td>测试</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><h5 id="scope" tabindex="-1">scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;scope&quot;">​</a></h5><p>scope 用于指定本次 commit 影响的范围。scope 依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。（scope 可省略）</p><h5 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;subject&quot;">​</a></h5><p>subject 是本次 commit 的简洁描述，长度约定在 50 个字符以内，通常遵循以下几个规范：</p><ul><li>用动词开头，第一人称现在时表述，例如：change 代替 changed 或 changes</li><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><h4 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h4><p>body 是对本次 commit 的详细描述，可以分成多行。（body 可省略）<br>跟 subject 类似，用动词开头，body 应该说明修改的原因和更改前后的行为对比。</p><h4 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h4><p>如果本次提交的代码是突破性的变更或关闭缺陷，则 Footer 必需，否则可以省略。</p><ul><li>突破性的变更当前代码与上一个版本有突破性改变，则 Footer 以 BREAKING CHANGE 开头，后面是对变动的描述、以及变动的理由。</li><li>关闭缺陷如果当前提交是针对特定的 issue，那么可以在 Footer 部分填写需要关闭的单个 issue 或一系列 issues。</li></ul><h4 id="参考例子" tabindex="-1">参考例子 <a class="header-anchor" href="#参考例子" aria-label="Permalink to &quot;参考例子&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">featfeat(browser</span><span style="color:#E1E4E8;">): onUrlChange event (</span><span style="color:#B392F0;">popstate/hashchange/polling</span><span style="color:#E1E4E8;">) Added new event to browser: - forward popstate event </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">forward</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hashchange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">popstate</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">polling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">when</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">neither</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">popstate</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nor</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hashchange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Breaks</span><span style="color:#E1E4E8;"> $browser</span><span style="color:#9ECBFF;">.onHashChange,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">was</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">removed</span><span style="color:#E1E4E8;"> (use </span><span style="color:#9ECBFF;">onUrlChange</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">instead</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">fixfix(compile</span><span style="color:#E1E4E8;">): couple of unit tests </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> IE9 Older IEs serialize html uppercased, but IE9 does not... Would be better to expect </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> insensitive, unfortunately jasmine does not allow to user regexps </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> throw expectations. Closes </span><span style="color:#6A737D;">#392 Breaks foo.bar api, foo.baz should be used instead</span></span>
<span class="line"><span style="color:#B392F0;">stylestyle(location</span><span style="color:#E1E4E8;">): add couple of missing semi colons</span></span>
<span class="line"><span style="color:#B392F0;">chorechore(release</span><span style="color:#E1E4E8;">): v3.4.2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">featfeat(browser</span><span style="color:#24292E;">): onUrlChange event (</span><span style="color:#6F42C1;">popstate/hashchange/polling</span><span style="color:#24292E;">) Added new event to browser: - forward popstate event </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">forward</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hashchange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">event</span><span style="color:#24292E;"> </span><span style="color:#032F62;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">popstate</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">do</span><span style="color:#24292E;"> </span><span style="color:#032F62;">polling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">when</span><span style="color:#24292E;"> </span><span style="color:#032F62;">neither</span><span style="color:#24292E;"> </span><span style="color:#032F62;">popstate</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nor</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hashchange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Breaks</span><span style="color:#24292E;"> $browser</span><span style="color:#032F62;">.onHashChange,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">was</span><span style="color:#24292E;"> </span><span style="color:#032F62;">removed</span><span style="color:#24292E;"> (use </span><span style="color:#032F62;">onUrlChange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">instead</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">fixfix(compile</span><span style="color:#24292E;">): couple of unit tests </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> IE9 Older IEs serialize html uppercased, but IE9 does not... Would be better to expect </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> insensitive, unfortunately jasmine does not allow to user regexps </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> throw expectations. Closes </span><span style="color:#6A737D;">#392 Breaks foo.bar api, foo.baz should be used instead</span></span>
<span class="line"><span style="color:#6F42C1;">stylestyle(location</span><span style="color:#24292E;">): add couple of missing semi colons</span></span>
<span class="line"><span style="color:#6F42C1;">chorechore(release</span><span style="color:#24292E;">): v3.4.2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="规范-commit-message-的好处" tabindex="-1">规范 commit message 的好处 <a class="header-anchor" href="#规范-commit-message-的好处" aria-label="Permalink to &quot;规范 commit message 的好处&quot;">​</a></h4><ul><li>首行就是简洁实用的关键信息，方便在 git history 中快速浏览。</li><li>具有更加详细的 body 和 footer，可以清晰的看出某次提交的目的和影响。</li><li>可以通过 type 过滤出想要查找的信息，也可以通过关键字快速查找相关提交。</li><li>可以直接从 commit 生成 change log。</li></ul><h3 id="集成-commitizen-实现规范提交" tabindex="-1">集成 Commitizen 实现规范提交 <a class="header-anchor" href="#集成-commitizen-实现规范提交" aria-label="Permalink to &quot;集成 Commitizen 实现规范提交&quot;">​</a></h3><p>上面介绍了 Angular 规范提交的格式，初次接触的同学咋一看可能会觉得复杂，其实不然，如果让大家在 git commit 的时候严格按照上面的格式来写，肯定是有压力的，首先得记住不同的类型到底是用来定义什么，subject 怎么写，body 怎么写，footer 要不要写等等问题，懒才是程序员第一生产力，为此我们使用 Commitizen 工具来帮助我们自动生成 commit message 格式，从而实现规范提交。<br>Commitizen 是一个帮助撰写规范 commit message 的工具。它有一个命令行工具 cz-cli。</p><h4 id="安装-commitizen" tabindex="-1">安装 Commitizen <a class="header-anchor" href="#安装-commitizen" aria-label="Permalink to &quot;安装 Commitizen&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitizen</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitizen</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h4><p>成功安装 Commitizen 后，我们用 <strong>cz-conventional-changelog</strong> 适配器来初始化项目：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitizen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cz-conventional-changelog</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-exact</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitizen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cz-conventional-changelog</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-exact</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><br>这行命令做了两件事：</p><ul><li>安装 cz-conventional-changelog 到开发依赖（devDependencies）</li><li>在 package.json 中增加了 config.commitizen</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="使用-commitizen" tabindex="-1">使用 Commitizen <a class="header-anchor" href="#使用-commitizen" aria-label="Permalink to &quot;使用 Commitizen&quot;">​</a></h4><p>以前我们提交代码都是 git commit -m &quot;xxx&quot;，现在改为 git cz，然后按照终端操作提示，逐步填入信息，就能自动生成规范的 commit message。<br> <br>最后，在 Git 提交历史中就能看到刚刚规范的提交记录了：</p><h4 id="自定义配置提交说明" tabindex="-1">自定义配置提交说明 <a class="header-anchor" href="#自定义配置提交说明" aria-label="Permalink to &quot;自定义配置提交说明&quot;">​</a></h4><p>从上面的截图可以看到，git cz 终端操作提示都是英文的，如果想改成中文的或者自定义这些配置选项，我们使用 <strong>cz-customizable</strong> 适配器。</p><h5 id="cz-customizable-初始化项目" tabindex="-1">cz-customizable 初始化项目 <a class="header-anchor" href="#cz-customizable-初始化项目" aria-label="Permalink to &quot;cz-customizable 初始化项目&quot;">​</a></h5><p>运行如下命令使用 cz-customizable 初始化项目，注意之前已经初始化过一次，这次再初始化，需要加 --force 覆盖。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitizen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cz-customizable</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-exact</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--force</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitizen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cz-customizable</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-exact</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行命令做了两件事：</p><ul><li>安装 cz-customizable 到开发依赖（devDependencies）</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">&quot;devDependencies&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;cz-customizable&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;^6.3.0&quot;,</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">&quot;devDependencies&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;">   </span><span style="color:#032F62;">...</span><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;cz-customizable&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;^6.3.0&quot;,</span><span style="color:#24292E;">   </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>修改 package.json 中的 config.commitizen 字段为：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="使用-cz-customizable" tabindex="-1">使用 cz-customizable <a class="header-anchor" href="#使用-cz-customizable" aria-label="Permalink to &quot;使用 cz-customizable&quot;">​</a></h5><p>在项目根目录下创建 .cz-config.js 文件，然后按照官方提供的<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fleoforfree%2Fcz-customizable%2Fblob%2Fmaster%2Fcz-config-EXAMPLE.js" target="_blank" rel="noreferrer">示例</a>来配置。<br>在本项目中我们修改成中文：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// type 类型（定义之后，可通过上下键选择）</span></span>
<span class="line"><span style="color:#E1E4E8;">	types: [</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;feat&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;feat:     新增功能&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;fix&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;fix:      修复 bug&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;docs&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;docs:     文档变更&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			value: </span><span style="color:#9ECBFF;">&#39;style&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			name: </span><span style="color:#9ECBFF;">&#39;style:    代码格式（不影响功能，例如空格、分号等格式修正）&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			value: </span><span style="color:#9ECBFF;">&#39;refactor&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			name: </span><span style="color:#9ECBFF;">&#39;refactor: 代码重构（不包括 bug 修复、功能新增）&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;perf&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;perf:     性能优化&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;test:     添加、修改测试用例&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			value: </span><span style="color:#9ECBFF;">&#39;build&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			name: </span><span style="color:#9ECBFF;">&#39;build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;ci&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;ci:       修改 CI 配置、脚本&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			value: </span><span style="color:#9ECBFF;">&#39;chore&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			name: </span><span style="color:#9ECBFF;">&#39;chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{value: </span><span style="color:#9ECBFF;">&#39;revert&#39;</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;revert:   回滚 commit&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">	],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// scope 类型（定义之后，可通过上下键选择）</span></span>
<span class="line"><span style="color:#E1E4E8;">	scopes: [</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;components&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;组件相关&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;hooks&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hook 相关&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;utils&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utils 相关&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;element-ui&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;对 element-ui 的调整&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;styles&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;样式相关&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;deps&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;项目依赖&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;auth&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;对 auth 修改&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;other&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;其他修改&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span></span>
<span class="line"><span style="color:#E1E4E8;">		[</span><span style="color:#9ECBFF;">&#39;custom&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;以上都不是？我要自定义&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	].</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(([</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			value,</span></span>
<span class="line"><span style="color:#E1E4E8;">			name: </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">padEnd</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">30</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">} (\${</span><span style="color:#E1E4E8;">description</span><span style="color:#9ECBFF;">})\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// allowCustomScopes: true,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// allowTicketNumber: false,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// isTicketNumberRequired: false,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ticketNumberPrefix: &#39;TICKET-&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ticketNumberRegExp: &#39;\\\\d{1,5}&#39;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 针对每一个 type 去定义对应的 scopes，例如 fix</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">  scopeOverrides: {</span></span>
<span class="line"><span style="color:#6A737D;">    fix: [</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;merge&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;style&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;e2eTest&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;unitTest&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">    ]</span></span>
<span class="line"><span style="color:#6A737D;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 交互提示信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	messages: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		type: </span><span style="color:#9ECBFF;">&#39;确保本次提交遵循 Angular 规范！</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">选择你要提交的类型：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		scope: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">选择一个 scope（可选）：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 选择 scope: custom 时会出下面的提示</span></span>
<span class="line"><span style="color:#E1E4E8;">		customScope: </span><span style="color:#9ECBFF;">&#39;请输入自定义的 scope：&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		subject: </span><span style="color:#9ECBFF;">\`请以云效任务id结尾填写简短精炼的提交描述,例如:&quot;还原首页设计稿 [#task_id]&quot;：</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		body: </span><span style="color:#9ECBFF;">&#39;填写更加详细的变更描述（可选）。使用 &quot;|&quot; 换行：</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		breaking: </span><span style="color:#9ECBFF;">&#39;列举非兼容性重大的变更（可选）：</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		footer: </span><span style="color:#9ECBFF;">&#39;列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		confirmCommit: </span><span style="color:#9ECBFF;">&#39;确认提交？&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span></span>
<span class="line"><span style="color:#E1E4E8;">	allowBreakingChanges: [</span><span style="color:#9ECBFF;">&#39;feat&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;fix&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 跳过要询问的步骤</span></span>
<span class="line"><span style="color:#E1E4E8;">	skipQuestions: [</span><span style="color:#9ECBFF;">&#39;body&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;footer&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// subject 限制长度</span></span>
<span class="line"><span style="color:#E1E4E8;">	subjectLimit: </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	breaklineChar: </span><span style="color:#9ECBFF;">&#39;|&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 支持 body 和 footer</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// footerPrefix : &#39;ISSUES CLOSED:&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// askForBreakingChangeFirst : true,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// type 类型（定义之后，可通过上下键选择）</span></span>
<span class="line"><span style="color:#24292E;">	types: [</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;feat&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;feat:     新增功能&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;fix&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;fix:      修复 bug&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;docs&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;docs:     文档变更&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			value: </span><span style="color:#032F62;">&#39;style&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			name: </span><span style="color:#032F62;">&#39;style:    代码格式（不影响功能，例如空格、分号等格式修正）&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			value: </span><span style="color:#032F62;">&#39;refactor&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			name: </span><span style="color:#032F62;">&#39;refactor: 代码重构（不包括 bug 修复、功能新增）&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;perf&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;perf:     性能优化&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;test:     添加、修改测试用例&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			value: </span><span style="color:#032F62;">&#39;build&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			name: </span><span style="color:#032F62;">&#39;build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;ci&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;ci:       修改 CI 配置、脚本&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			value: </span><span style="color:#032F62;">&#39;chore&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			name: </span><span style="color:#032F62;">&#39;chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{value: </span><span style="color:#032F62;">&#39;revert&#39;</span><span style="color:#24292E;">, name: </span><span style="color:#032F62;">&#39;revert:   回滚 commit&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">	],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// scope 类型（定义之后，可通过上下键选择）</span></span>
<span class="line"><span style="color:#24292E;">	scopes: [</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;components&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;组件相关&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;hooks&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hook 相关&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;utils&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utils 相关&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;element-ui&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;对 element-ui 的调整&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;styles&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;样式相关&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;deps&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;项目依赖&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;auth&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;对 auth 修改&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;other&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;其他修改&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span></span>
<span class="line"><span style="color:#24292E;">		[</span><span style="color:#032F62;">&#39;custom&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;以上都不是？我要自定义&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(([</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			value,</span></span>
<span class="line"><span style="color:#24292E;">			name: </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">value</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">30</span><span style="color:#032F62;">)</span><span style="color:#032F62;">} (\${</span><span style="color:#24292E;">description</span><span style="color:#032F62;">})\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// allowCustomScopes: true,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// allowTicketNumber: false,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// isTicketNumberRequired: false,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ticketNumberPrefix: &#39;TICKET-&#39;,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ticketNumberRegExp: &#39;\\\\d{1,5}&#39;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 针对每一个 type 去定义对应的 scopes，例如 fix</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">  scopeOverrides: {</span></span>
<span class="line"><span style="color:#6A737D;">    fix: [</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;merge&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;style&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;e2eTest&#39; },</span></span>
<span class="line"><span style="color:#6A737D;">      { name: &#39;unitTest&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">    ]</span></span>
<span class="line"><span style="color:#6A737D;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 交互提示信息</span></span>
<span class="line"><span style="color:#24292E;">	messages: {</span></span>
<span class="line"><span style="color:#24292E;">		type: </span><span style="color:#032F62;">&#39;确保本次提交遵循 Angular 规范！</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">选择你要提交的类型：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		scope: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">选择一个 scope（可选）：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 选择 scope: custom 时会出下面的提示</span></span>
<span class="line"><span style="color:#24292E;">		customScope: </span><span style="color:#032F62;">&#39;请输入自定义的 scope：&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		subject: </span><span style="color:#032F62;">\`请以云效任务id结尾填写简短精炼的提交描述,例如:&quot;还原首页设计稿 [#task_id]&quot;：</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		body: </span><span style="color:#032F62;">&#39;填写更加详细的变更描述（可选）。使用 &quot;|&quot; 换行：</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		breaking: </span><span style="color:#032F62;">&#39;列举非兼容性重大的变更（可选）：</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		footer: </span><span style="color:#032F62;">&#39;列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		confirmCommit: </span><span style="color:#032F62;">&#39;确认提交？&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span></span>
<span class="line"><span style="color:#24292E;">	allowBreakingChanges: [</span><span style="color:#032F62;">&#39;feat&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;fix&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 跳过要询问的步骤</span></span>
<span class="line"><span style="color:#24292E;">	skipQuestions: [</span><span style="color:#032F62;">&#39;body&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;footer&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// subject 限制长度</span></span>
<span class="line"><span style="color:#24292E;">	subjectLimit: </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	breaklineChar: </span><span style="color:#032F62;">&#39;|&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 支持 body 和 footer</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// footerPrefix : &#39;ISSUES CLOSED:&#39;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// askForBreakingChangeFirst : true,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div><p><br>建议大家结合项目实际情况来自定义配置提交规则，例如很多时候我们不需要写长描述，公司内部的代码仓库也不需要管理 issue，那么可以把询问 body 和 footer 的步骤跳过（在 .cz-config.js 中修改成 skipQuestions: [&#39;body&#39;, &#39;footer&#39;]）。</p><h3 id="集成-commitlint-验证提交规范" tabindex="-1">集成 commitlint 验证提交规范 <a class="header-anchor" href="#集成-commitlint-验证提交规范" aria-label="Permalink to &quot;集成 commitlint 验证提交规范&quot;">​</a></h3><p>在“代码规范”章节，我们已经讲到过，尽管制定了规范，但在多人协作的项目中，总有些人依旧我行我素，因此提交代码这个环节，我们也增加一个限制：<strong>只让符合 Angular 规范的 commit message 通过</strong>，我们借助 @commitlint/config-conventional 和 @commitlint/cli 来实现。</p><h4 id="安装-commitlint" tabindex="-1">安装 commitlint <a class="header-anchor" href="#安装-commitlint" aria-label="Permalink to &quot;安装 commitlint&quot;">​</a></h4><p>安装 @commitlint/config-conventional 和 @commitlint/cli</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/config-conventional</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@commitlint/cli</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/config-conventional</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@commitlint/cli</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="配置-commitlint" tabindex="-1">配置 commitlint <a class="header-anchor" href="#配置-commitlint" aria-label="Permalink to &quot;配置 commitlint&quot;">​</a></h4><ul><li>创建 commitlint.config.js 文件 在项目根目录下创建 commitlint.config.js 文件，并填入以下内容：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {extends: [</span><span style="color:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="color:#E1E4E8;">]}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {extends: [</span><span style="color:#032F62;">&#39;@commitlint/config-conventional&#39;</span><span style="color:#24292E;">]}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>或直接使用快捷命令：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">echo </span><span style="color:#9ECBFF;">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> commitlint.config.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">echo </span><span style="color:#032F62;">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> commitlint.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>使用 husky 的 commit-msg hook 触发验证提交信息的命令<br>我们使用 husky 命令在 .husky 目录下创建 commit-msg 文件，并在此执行 commit message 的验证命令。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npx husky add .husky</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">commit</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">msg </span><span style="color:#9ECBFF;">&quot;npx --no-install commitlint --edit $1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npx husky add .husky</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">commit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">msg </span><span style="color:#032F62;">&quot;npx --no-install commitlint --edit $1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="commitlint-验证" tabindex="-1">commitlint 验证 <a class="header-anchor" href="#commitlint-验证" aria-label="Permalink to &quot;commitlint 验证&quot;">​</a></h4><ul><li>不符合规范的提交信息<br>如下图，提交信息 test commitlint 不符合规范，提交失败。</li><li>符合规范的提交信息</li></ul><p>如下图，提交信息 test: commitlint test 符合规范，成功提交到仓库。 <br>因为已在项目中集成 commitizen，建议大家用 git cz 来代替 git commit 提交代码，可以保证提交信息规范。</p><h2 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h2><p>单元测试是项目开发中一个非常重要的环节，完整的测试能为代码和业务提供质量保证，减少 Bug 的出现。<br>下面带领大家在 Vite + Vue3 + TypeScript 的项目中集成单元测试工具。</p><h3 id="安装核心依赖" tabindex="-1">安装核心依赖 <a class="header-anchor" href="#安装核心依赖" aria-label="Permalink to &quot;安装核心依赖&quot;">​</a></h3><p>我们使用 Vue 官方提供的 <strong>vue-test-utils</strong> 和社区流行的测试工具 <strong>jest</strong> 来进行 Vue 组件的单元测试。</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-test-utils-next" target="_blank" rel="noreferrer">vue-test-utils</a> The next iteration of Vue Test Utils. It targets Vue 3.</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ffacebook%2Fjest" target="_blank" rel="noreferrer">jest</a> Delightful JavaScript Testing.</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-jest" target="_blank" rel="noreferrer">vue-jest</a> Jest Vue transformer</li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fkulshekhar%2Fts-jest" target="_blank" rel="noreferrer">ts-jest</a> A Jest transformer with source map support that lets you use Jest to test projects written in TypeScript.</li></ul><p>安装这些工具为开发依赖（devDependencies）：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm i @vue</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">utils@next jest vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jest@next ts</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jest </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm i @vue</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">utils@next jest vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jest@next ts</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jest </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="创建-jest-配置文件" tabindex="-1">创建 jest 配置文件 <a class="header-anchor" href="#创建-jest-配置文件" aria-label="Permalink to &quot;创建 jest 配置文件&quot;">​</a></h3><p>在项目根目录下新建 jest.config.js 文件：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	moduleFileExtensions: [</span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	preset: </span><span style="color:#9ECBFF;">&#39;ts-jest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	testEnvironment: </span><span style="color:#9ECBFF;">&#39;jsdom&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	transform: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;^.+</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.vue$&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;vue-jest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// vue 文件用 vue-jest 转换</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;^.+</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.ts$&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;ts-jest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// ts 文件用 ts-jest 转换</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 匹配 __tests__ 目录下的 .js/.ts 文件 或其他目录下的 xx.test.js/ts xx.spec.js/ts</span></span>
<span class="line"><span style="color:#E1E4E8;">	testRegex: </span><span style="color:#9ECBFF;">&#39;(/__tests__/.*|(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.|/)(test|spec))</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.(ts)$&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	moduleFileExtensions: [</span><span style="color:#032F62;">&#39;vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	preset: </span><span style="color:#032F62;">&#39;ts-jest&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	testEnvironment: </span><span style="color:#032F62;">&#39;jsdom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	transform: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;^.+</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.vue$&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;vue-jest&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// vue 文件用 vue-jest 转换</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;^.+</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.ts$&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;ts-jest&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// ts 文件用 ts-jest 转换</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 匹配 __tests__ 目录下的 .js/.ts 文件 或其他目录下的 xx.test.js/ts xx.spec.js/ts</span></span>
<span class="line"><span style="color:#24292E;">	testRegex: </span><span style="color:#032F62;">&#39;(/__tests__/.*|(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.|/)(test|spec))</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.(ts)$&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="创建单元测试文件" tabindex="-1">创建单元测试文件 <a class="header-anchor" href="#创建单元测试文件" aria-label="Permalink to &quot;创建单元测试文件&quot;">​</a></h3><p>在上面的 jest.config.js 文件中，我们配置只匹配 <strong>tests</strong> 目录下的任意 .ts 文件或其他目录下的 xx.test.ts/xx.spec.ts 文件进行单元测试。<br>这里，我们在项目根目录下创建 tests 目录来存储单元测试文件</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">src/</span></span>
<span class="line"><span style="color:#B392F0;">└──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests/</span><span style="color:#E1E4E8;">                           </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">单元测试目录</span></span>
<span class="line"><span style="color:#B392F0;">├──</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Test.spec.ts</span><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">组件测试</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">src/</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests/</span><span style="color:#24292E;">                           </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">单元测试目录</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Test.spec.ts</span><span style="color:#24292E;">                 </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">组件测试</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>Test.vue</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;test-container page-container&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;page-title&quot;</span><span style="color:#E1E4E8;">&gt;Unit Test Page&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;count is: {{ count }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;increment&quot;</span><span style="color:#E1E4E8;">&gt;increment&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {defineComponent, ref} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	name: </span><span style="color:#9ECBFF;">&#39;Vuex&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			count.value </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {count, increment}</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;test-container page-container&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;page-title&quot;</span><span style="color:#24292E;">&gt;Unit Test Page&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;count is: {{ count }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;increment&quot;</span><span style="color:#24292E;">&gt;increment&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ts&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {defineComponent, ref} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineComponent</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	name: </span><span style="color:#032F62;">&#39;Vuex&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">count</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			count.value </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {count, increment}</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>Test.spec.ts</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {mount} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vue/test-utils&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../src/views/Test.vue&#39;</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Test.vue&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wrapper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(Test)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(wrapper.</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toContain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Unit Test Page&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(wrapper.</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toContain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count is: 0&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> wrapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">trigger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(wrapper.</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toContain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count is: 1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {mount} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vue/test-utils&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../src/views/Test.vue&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Test.vue&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wrapper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(Test)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(wrapper.</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toContain</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Unit Test Page&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(wrapper.</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toContain</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;count is: 0&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> wrapper.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">trigger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(wrapper.</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toContain</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;count is: 1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="集成-types-jest" tabindex="-1">集成 @types/jest <a class="header-anchor" href="#集成-types-jest" aria-label="Permalink to &quot;集成 @types/jest&quot;">​</a></h3><p>如上图，我们使用 VSCode / WebStrom / IDEA 等编辑器时，在单元测试文件中，IDE 会提示某些方法不存在（如 test、describe、it、expect 等），安装 @types/jest 即可解决。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@types/jest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@types/jest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>TypeScript 的编译器也会提示 jest 的方法和类型找不到，我们还需把 @types/jest 添加根目录下的 ts.config.json（TypeScript 配置文件）中：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;types&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;vite/client&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;jest&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;types&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;vite/client&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jest&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="添加-eslint-plugin-jest" tabindex="-1">添加 eslint-plugin-jest <a class="header-anchor" href="#添加-eslint-plugin-jest" aria-label="Permalink to &quot;添加 eslint-plugin-jest&quot;">​</a></h3><p>因为我们在项目中集成了 ESLint，如上图很明显是没通过 ESLint 规则检验。因此，我们还需要在 ESLint 中增加 <strong>eslint-plugin-jest</strong> 插件来解除对 jest 的校验。</p><ul><li>安装 eslint-plugin-jestnpm i eslint-plugin-jest -D</li><li>添加 eslint-plugin-jest 到 ESLint 配置文件 .eslintrc.js 中</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;plugin:jest/recommended&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  extends: [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;plugin:jest/recommended&#39;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在，我们的单元测试代码就不会有错误提示信息了 ؏؏☝ᖗ 乛 ◡ 乛 ᖘ☝؏؏</p><h3 id="执行单元测试" tabindex="-1">执行单元测试 <a class="header-anchor" href="#执行单元测试" aria-label="Permalink to &quot;执行单元测试&quot;">​</a></h3><p>在根目录下 package.json 文件的 scripts 中，添加一条单元测试命令： &quot;test&quot;: &quot;jest&quot;。</p><p>执行命令 npm run test 即可进行单元测试，jest 会根据 jest.config.js 配置文件去查找 <strong>tests</strong> 目录下的 .ts 文件或其他任意目录下的 .spec.ts 和 .test.ts 文件，然后执行单元测试方法。<br>你可以在 jest.config.js 配置文件中，自由配置单元测试文件的目录。</p><ul><li>单元测试全部通过时的终端显示信息</li><li>单元测试未全部通过时的终端显示信息</li></ul><p>当单元测试没有全部通过时，我们需要根据报错信息去优化对应组件的代码，进一步提高项目健壮性。但是写单元测试是件比较痛苦的事，我个人觉得也没必要全部组件都写单元测试，根据项目实际情况有针对性去写就行了。</p><h3 id="单元测试约束" tabindex="-1">单元测试约束 <a class="header-anchor" href="#单元测试约束" aria-label="Permalink to &quot;单元测试约束&quot;">​</a></h3><p>前面，我们使用 husky 在 Git 的 pre-commit 和 commit-msg 阶段分别约束代码风格规范和提交信息规范。这一步，我们在 pre-push 阶段进行单元测试，只有单元测试全部通过才让代码 push 到远端仓库，否则终止 push。<br>使用 husky 命令在 .husky 目录下自动创建 pre-push hook 文件，并在此执行单元测试命令 npm run test。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.husky/pre-push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;npm run test </span><span style="color:#79B8FF;">$1</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.husky/pre-push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;npm run test </span><span style="color:#005CC5;">$1</span><span style="color:#032F62;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在，我们在 git push 时就能先进行单元测试了，只有单元测试全部通过，才能成功 push。<br><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FXPoet%2Fvite-vue3-starter" target="_blank" rel="noreferrer"><br></a></p><h2 id="自动部署" tabindex="-1">自动部署 <a class="header-anchor" href="#自动部署" aria-label="Permalink to &quot;自动部署&quot;">​</a></h2><p>到了这一步，我们已经在项目中集成<strong>代码规范约束</strong>、<strong>提交信息规范约束</strong>，<strong>单元测试约束</strong>，从而保证我们远端仓库（如 GitHub、GitLab、Gitee 仓库等）的代码都是高质量的。<br>本项目是要搭建一套规范的前端工程化环境，为此我们使用 CI（Continuous Integration 持续集成）来完成项目最后的部署工作。<br>常见的 CI 工具有 GitHub Actions、GitLab CI、Travis CI、Circle CI 等。<br>这里，我们使用 GitHub Actions。</p><h3 id="什么是-github-actions" tabindex="-1">什么是 GitHub Actions <a class="header-anchor" href="#什么是-github-actions" aria-label="Permalink to &quot;什么是 GitHub Actions&quot;">​</a></h3><p>GitHub Actions 是 GitHub 的持续集成服务，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器、发布到第三方服务等等，GitHub 把这些操作称为 actions。</p><h3 id="配置-github-actions" tabindex="-1">配置 GitHub Actions <a class="header-anchor" href="#配置-github-actions" aria-label="Permalink to &quot;配置 GitHub Actions&quot;">​</a></h3><h4 id="创建-github-仓库" tabindex="-1">创建 GitHub 仓库 <a class="header-anchor" href="#创建-github-仓库" aria-label="Permalink to &quot;创建 GitHub 仓库&quot;">​</a></h4><p>因为 GitHub Actions 只对 GitHub 仓库有效，所以我们<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fnew" target="_blank" rel="noreferrer">创建 GitHub 仓库</a>来托管项目代码。</p><p>其中，我们用：</p><ul><li>master 分支存储项目源代码</li><li>gh-pages 分支存储打包后的静态文件</li></ul><p>gh-pages 分支，是 GitHub Pages 服务的固定分支，可以通过 HTTP 的方式访问到这个分支的静态文件资源。</p><h4 id="创建-github-token" tabindex="-1">创建 GitHub Token <a class="header-anchor" href="#创建-github-token" aria-label="Permalink to &quot;创建 GitHub Token&quot;">​</a></h4><p>创建一个有 <strong>repo</strong> 和 <strong>workflow</strong> 权限的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsettings%2Ftokens%2Fnew" target="_blank" rel="noreferrer">GitHub Token</a></p><p>注意：新生成的 Token 只会显示一次，保存起来，后面要用到。如有遗失，重新生成即可。</p><h4 id="在仓库中添加-secret" tabindex="-1">在仓库中添加 secret <a class="header-anchor" href="#在仓库中添加-secret" aria-label="Permalink to &quot;在仓库中添加 secret&quot;">​</a></h4><p>将上面新创建的 Token 添加到 GitHub 仓库的 Secrets 里，并将这个新增的 secret 命名为 VUE3_DEPLOY （名字无所谓，看你喜欢）。<br>步骤：仓库 -&gt; settings -&gt; Secrets -&gt; New repository secret。</p><p>新创建的 secret VUE3_DEPLOY 在 Actions 配置文件中要用到，两个地方需保持一致！</p><h4 id="创建-actions-配置文件" tabindex="-1">创建 Actions 配置文件 <a class="header-anchor" href="#创建-actions-配置文件" aria-label="Permalink to &quot;创建 Actions 配置文件&quot;">​</a></h4><ol><li>在项目根目录下创建 .github 目录。</li><li>在 .github 目录下创建 workflows 目录。</li><li>在 workflows 目录下创建 deploy.yml 文件。</li></ol><p>deploy.yml 文件的内容：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#85E89D;">deploy on</span><span style="color:#E1E4E8;">:   </span><span style="color:#85E89D;">push</span><span style="color:#E1E4E8;">:     </span><span style="color:#85E89D;">branches</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">master</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;"># master 分支有 push 时触发 jobs:   deploy:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v2       - name: Setup Node.js v14.x         uses: actions/setup-node@v1         with:           node-version: &#39;14.x&#39;       - name: Install         run: npm install # 安装依赖       - name: Build         run: npm run build # 打包       - name: Deploy         uses: peaceiris/actions-gh-pages@v3 # 使用部署到 GitHub pages 的 action         with:           publish_dir: ./dist # 部署打包后的 dist 目录           github_token: \${{ secrets.VUE3_DEPLOY }} # secret 名           user_name: \${{ secrets.MY_USER_NAME }}           user_email: \${{ secrets.MY_USER_EMAIL }}           commit_message: Update Vite2.x + Vue3.x + TypeScript Starter # 部署时的 git 提交信息，自由填写</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#22863A;">deploy on</span><span style="color:#24292E;">:   </span><span style="color:#22863A;">push</span><span style="color:#24292E;">:     </span><span style="color:#22863A;">branches</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">master</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># master 分支有 push 时触发 jobs:   deploy:     runs-on: ubuntu-latest     steps:       - uses: actions/checkout@v2       - name: Setup Node.js v14.x         uses: actions/setup-node@v1         with:           node-version: &#39;14.x&#39;       - name: Install         run: npm install # 安装依赖       - name: Build         run: npm run build # 打包       - name: Deploy         uses: peaceiris/actions-gh-pages@v3 # 使用部署到 GitHub pages 的 action         with:           publish_dir: ./dist # 部署打包后的 dist 目录           github_token: \${{ secrets.VUE3_DEPLOY }} # secret 名           user_name: \${{ secrets.MY_USER_NAME }}           user_email: \${{ secrets.MY_USER_EMAIL }}           commit_message: Update Vite2.x + Vue3.x + TypeScript Starter # 部署时的 git 提交信息，自由填写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="自动部署触发原理" tabindex="-1">自动部署触发原理 <a class="header-anchor" href="#自动部署触发原理" aria-label="Permalink to &quot;自动部署触发原理&quot;">​</a></h3><p>当有新提交的代码 push 到 GitHub 仓库时，就会触发 GitHub Actions，在 GitHub 服务器上执行 Action 配置文件里面的命令，例如：<strong>安装依赖</strong>、<strong>项目打包</strong>等，然后将打包好的静态文件部署到 GitHub Pages 上，最后，我们就能通过域名访问了。<br>🌏 通过域名 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fvite-vue3-starter.xpoet.cn%2F" target="_blank" rel="noreferrer">vite-vue3-starter.xpoet.cn/</a> 访问本项目<br>使用自动部署，我们只需专注于项目开发阶段，任何重复且枯燥的行为都交由程序去完成，懒才是程序员第一生产力。<br>事实上，自动部署只是 GitHub Actions 功能的冰山一角，GitHub Actions 能做的事还很多很多，大家感兴趣的话自行查阅。</p>`,223),i=[c];function E(y,u,F,b,d,m){return e(),o("div",null,i)}const v=p(r,[["render",E]]);export{C as __pageData,v as default};
