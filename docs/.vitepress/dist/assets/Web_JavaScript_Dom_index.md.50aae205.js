import{_ as s,a as n,b as a,c as l,d as p,e,f as o}from"./chunks/render7.96e75389.js";import{_ as r,o as t,c,a4 as i}from"./chunks/framework.c4ff8a6b.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/Dom/index.md","filePath":"Web/JavaScript/Dom/index.md","lastUpdated":1693864762000}'),y={name:"Web/JavaScript/Dom/index.md"},E=i(`<h2 id="dom-节点操作" tabindex="-1">DOM-节点操作 <a class="header-anchor" href="#dom-节点操作" aria-label="Permalink to &quot;DOM-节点操作&quot;">​</a></h2><details><summary>点击这里展开/折叠代码块</summary><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// id获取元素</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 通过class查找</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementsByClassName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过name名称获取（一组）</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementsByName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过标签名获取(一组）</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementsByTagName</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过选择器获取</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过选择器获取全部</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">queySelectoAll</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 获取指定元素所有的子元素</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querSelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">div.children </span><span style="color:#6A737D;">// 获取到的是div下的子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.children[索引值] </span><span style="color:#6A737D;">// 获取到的是所有的子元素（元素节点）</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">childNodes</span><span style="color:#E1E4E8;">()</span><span style="color:#6A737D;">// 返回的是div下的所有的子节点，包含文本节点，注释，元素节点啥的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以下方法只支持IE9及以上支持，但是工作中并不使用</span></span>
<span class="line"><span style="color:#F97583;">--------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#6A737D;">// 获取第一个子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.firstElementChild </span><span style="color:#6A737D;">//返回父节点下第一个元素节点</span></span>
<span class="line"><span style="color:#6A737D;">// 获取最后一个子元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.  </span><span style="color:#6A737D;">// 元素节点，可以偶尔使用，</span></span>
<span class="line"><span style="color:#6A737D;">// 获取子元素/父节点</span></span>
<span class="line"><span style="color:#E1E4E8;">div.parenElement</span></span>
<span class="line"><span style="color:#E1E4E8;">div.parentNode  </span><span style="color:#6A737D;">//2者用法相同，需要浏览器版本不同</span></span>
<span class="line"><span style="color:#6A737D;">// 相邻上一个节点/元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.previousElementSibling </span><span style="color:#6A737D;">//返回上一个元素节点，还不错</span></span>
<span class="line"><span style="color:#6A737D;">// 获取相邻的下一个节点/元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.nextElementSibling</span></span>
<span class="line"><span style="color:#F97583;">----------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">div.firstChild  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">div.nextSibling   </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">div.previousSibling  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">lastchild</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建节点</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;span&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 添加节点</span></span>
<span class="line"><span style="color:#6A737D;">// 创建文档片段（碎片）</span></span>
<span class="line"><span style="color:#E1E4E8;">docuent.</span><span style="color:#B392F0;">createDocumentFragment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 会添加到最后</span></span>
<span class="line"><span style="color:#6A737D;">// 插入兄弟节点</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(新参，旧参)</span></span>
<span class="line"><span style="color:#6A737D;">// 替换节点</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">replaceChild</span><span style="color:#E1E4E8;">(新参 , 旧参);</span></span>
<span class="line"><span style="color:#6A737D;">// 删除节点,只能通过父元素来删除</span></span>
<span class="line"><span style="color:#E1E4E8;">document.parentNode.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(指定子元素)</span></span>
<span class="line"><span style="color:#6A737D;">// 克隆节点</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">cloneNode</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//参数传true，表示子元素也克隆</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">无论是创建还是查询出来的标签，系统都会将元素包装成一个对象返回给我们，</span></span>
<span class="line"><span style="color:#6A737D;">对象中包含了元素的属性</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取元素属性</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;img&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">div.src</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">getAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;alt&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 可以获取自定义属性</span></span>
<span class="line"><span style="color:#6A737D;">// 修改元素</span></span>
<span class="line"><span style="color:#E1E4E8;">div.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;图片标题&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;22&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 可以修改自定义属性</span></span>
<span class="line"><span style="color:#6A737D;">// 新增属性</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it666&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;66666&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 存在修改，不存在新增</span></span>
<span class="line"><span style="color:#6A737D;">// 删除属性</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">removeAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">div.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 删除div下的a标签 // 只是剪切走，a节点还在堆内存中</span></span>
<span class="line"><span style="color:#E1E4E8;">a.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 直接删除自己，并且从内存中移出</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取元素内容</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#6A737D;">// 包含标签</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerText </span><span style="color:#6A737D;">// 不包含标签，去除空格</span></span>
<span class="line"><span style="color:#E1E4E8;">div.textContent </span><span style="color:#6A737D;">// 不包含标签，去除空格</span></span>
<span class="line"><span style="color:#6A737D;">// 设置内容</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerText</span></span>
<span class="line"><span style="color:#E1E4E8;">div.textContent</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置元素样式 拥有-采用驼峰转换，添加的样式都是行内样式，会覆盖同名css</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">div.className </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">div.style.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;300px&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取样式</span></span>
<span class="line"><span style="color:#E1E4E8;">div.style.width </span><span style="color:#6A737D;">// 只能获取行内样式的值</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(div) </span><span style="color:#6A737D;">// 获取全部</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// id获取元素</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 通过class查找</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementsByClassName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过name名称获取（一组）</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementsByName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过标签名获取(一组）</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过选择器获取</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 通过选择器获取全部</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">queySelectoAll</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 获取指定元素所有的子元素</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querSelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">div.children </span><span style="color:#6A737D;">// 获取到的是div下的子元素</span></span>
<span class="line"><span style="color:#24292E;">div.children[索引值] </span><span style="color:#6A737D;">// 获取到的是所有的子元素（元素节点）</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">childNodes</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">// 返回的是div下的所有的子节点，包含文本节点，注释，元素节点啥的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 以下方法只支持IE9及以上支持，但是工作中并不使用</span></span>
<span class="line"><span style="color:#D73A49;">--------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#6A737D;">// 获取第一个子元素</span></span>
<span class="line"><span style="color:#24292E;">div.firstElementChild </span><span style="color:#6A737D;">//返回父节点下第一个元素节点</span></span>
<span class="line"><span style="color:#6A737D;">// 获取最后一个子元素</span></span>
<span class="line"><span style="color:#24292E;">div.  </span><span style="color:#6A737D;">// 元素节点，可以偶尔使用，</span></span>
<span class="line"><span style="color:#6A737D;">// 获取子元素/父节点</span></span>
<span class="line"><span style="color:#24292E;">div.parenElement</span></span>
<span class="line"><span style="color:#24292E;">div.parentNode  </span><span style="color:#6A737D;">//2者用法相同，需要浏览器版本不同</span></span>
<span class="line"><span style="color:#6A737D;">// 相邻上一个节点/元素</span></span>
<span class="line"><span style="color:#24292E;">div.previousElementSibling </span><span style="color:#6A737D;">//返回上一个元素节点，还不错</span></span>
<span class="line"><span style="color:#6A737D;">// 获取相邻的下一个节点/元素</span></span>
<span class="line"><span style="color:#24292E;">div.nextElementSibling</span></span>
<span class="line"><span style="color:#D73A49;">----------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">div.firstChild  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">div.nextSibling   </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">div.previousSibling  </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">lastchild</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建节点</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;span&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 添加节点</span></span>
<span class="line"><span style="color:#6A737D;">// 创建文档片段（碎片）</span></span>
<span class="line"><span style="color:#24292E;">docuent.</span><span style="color:#6F42C1;">createDocumentFragment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 会添加到最后</span></span>
<span class="line"><span style="color:#6A737D;">// 插入兄弟节点</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">insertBefore</span><span style="color:#24292E;">(新参，旧参)</span></span>
<span class="line"><span style="color:#6A737D;">// 替换节点</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">replaceChild</span><span style="color:#24292E;">(新参 , 旧参);</span></span>
<span class="line"><span style="color:#6A737D;">// 删除节点,只能通过父元素来删除</span></span>
<span class="line"><span style="color:#24292E;">document.parentNode.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(指定子元素)</span></span>
<span class="line"><span style="color:#6A737D;">// 克隆节点</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">cloneNode</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//参数传true，表示子元素也克隆</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">无论是创建还是查询出来的标签，系统都会将元素包装成一个对象返回给我们，</span></span>
<span class="line"><span style="color:#6A737D;">对象中包含了元素的属性</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取元素属性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">div.src</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;alt&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 可以获取自定义属性</span></span>
<span class="line"><span style="color:#6A737D;">// 修改元素</span></span>
<span class="line"><span style="color:#24292E;">div.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;图片标题&quot;</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;22&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 可以修改自定义属性</span></span>
<span class="line"><span style="color:#6A737D;">// 新增属性</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it666&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;66666&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 存在修改，不存在新增</span></span>
<span class="line"><span style="color:#6A737D;">// 删除属性</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">removeAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">div.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 删除div下的a标签 // 只是剪切走，a节点还在堆内存中</span></span>
<span class="line"><span style="color:#24292E;">a.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 直接删除自己，并且从内存中移出</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取元素内容</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#6A737D;">// 包含标签</span></span>
<span class="line"><span style="color:#24292E;">div.innerText </span><span style="color:#6A737D;">// 不包含标签，去除空格</span></span>
<span class="line"><span style="color:#24292E;">div.textContent </span><span style="color:#6A737D;">// 不包含标签，去除空格</span></span>
<span class="line"><span style="color:#6A737D;">// 设置内容</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML</span></span>
<span class="line"><span style="color:#24292E;">div.innerText</span></span>
<span class="line"><span style="color:#24292E;">div.textContent</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置元素样式 拥有-采用驼峰转换，添加的样式都是行内样式，会覆盖同名css</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">div.className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">div.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;300px&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取样式</span></span>
<span class="line"><span style="color:#24292E;">div.style.width </span><span style="color:#6A737D;">// 只能获取行内样式的值</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(div) </span><span style="color:#6A737D;">// 获取全部</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br></div></div></details><h2 id="dom-css-渲染树-解析与加载-回流与重绘" tabindex="-1">DOM/CSS 渲染树，解析与加载，回流与重绘 <a class="header-anchor" href="#dom-css-渲染树-解析与加载-回流与重绘" aria-label="Permalink to &quot;DOM/CSS 渲染树，解析与加载，回流与重绘&quot;">​</a></h2><h3 id="_1-解析" tabindex="-1">1.解析 <a class="header-anchor" href="#_1-解析" aria-label="Permalink to &quot;1.解析&quot;">​</a></h3><p>DOM 树的构建 也就是对 html 的<strong>解析</strong><br><img src="`+s+'" alt="image.png"></p><h3 id="_2-加载" tabindex="-1">2.加载 <a class="header-anchor" href="#_2-加载" aria-label="Permalink to &quot;2.加载&quot;">​</a></h3><p>加载内部资源，或者外部资源，是在解析之后开始的，属于异步</p><h3 id="_3-render-tree-渲染树" tabindex="-1">3. Render Tree 渲染树 <a class="header-anchor" href="#_3-render-tree-渲染树" aria-label="Permalink to &quot;3. Render Tree 渲染树&quot;">​</a></h3><p>dom Tree + css Tree = Render Tree<br>1.渲染树每个节点都有自己的样式<br>2.不包含隐藏节点 ：display:none , head 之类不需要绘制的节点<br>3.visibility：hidden 相对应的节点是包含在渲染树上的，（占有空间影响布局）<br>4.渲染树上的每一个节点都会被当作一个盒子 box，具有内容填充，边距，边框，位置，大小，其他样式</p><p>** render tree 构建完毕后浏览器它绘制页面**</p><h3 id="_4-回流-reflow" tabindex="-1">4.回流 （reflow） <a class="header-anchor" href="#_4-回流-reflow" aria-label="Permalink to &quot;4.回流 （reflow）&quot;">​</a></h3><p>回流一定会引起重绘，而重绘不一定是回流产生的后续<br>当 js 操作页面的节点时，就会产生回流或者重绘<br>节点的尺寸，布局，display：none block，等一些改变的时候，渲染树中的一部分或者全部需要重新构建 称之为<strong>回流</strong><br><strong>只要加载页面一定会引起回流，因为会构建 render Tree 渲染页面</strong><br><strong>导致回流的因素</strong>：</p><ol><li>DOM 节点增加，删除</li><li>DOM 节点位置变化（margin，top，。。。）</li><li>元素的尺寸大小，边距，填充，边框，宽高</li><li>DOM 节点 display 显示与否</li><li>页面的渲染初始化</li><li>浏览器窗口尺寸变化（resize）也会影响回流</li><li>向浏览器请求某些样式信息 (offset, scroll,client,width,height),getComputedStyle 等</li></ol><p><strong>回流比重绘的代价更高，产生的性能问题比重绘多的多的多</strong></p><h3 id="_5-重绘-repaint" tabindex="-1">5.重绘（repaint） <a class="header-anchor" href="#_5-重绘-repaint" aria-label="Permalink to &quot;5.重绘（repaint）&quot;">​</a></h3><p>回流时，浏览器会看重新构建受印象部分的渲染树，就一定会引起重绘<br>** 回流完成后，浏览器会根据新的渲染树重新回值回流影响的部分节点，这个重新绘制的过程为重绘**<br>1.<br><img src="'+n+'" alt="image.png"></p><p>假如我们创建一个节点然后添加在 body 最后，那么浏览器会发生一次 dom Tree 的构建以及 render Tree 的重新渲染，以及回流和重绘，<br>可是当我们使用 insertBefore 时将节点添加到 body 最上面那么所有的节点都需要重新经过 dom Tree 的构建以及 render Tree 的渲染，以及它们的回流和重绘，如果选择在 div.box 中最顶端插入，也是会引起 box 内里面所有盒子 dom Tree 的构建，以及 render Tree 的渲染，以及它们的回流和重绘<br><strong>因此我们应该减少使用 insertBefore 来插入元素</strong><br><strong>2.</strong><br><img src="'+a+'" alt="image.png"><br>通过加类名的方式可以只引起一次回流和一次重绘，这属于一种批量处理<br>通过文档碎片来减少重绘和回流的次数从而提高性能从 10 次减少为一次<br>3.<br><img src="'+l+'" alt="image.png"><br>文档碎片 docuent.createDocumentFragment()不占 dom 树以及渲染树里面，<br>4.<br><img src="'+p+'" alt="image.png"><br>通过一次显示与隐藏只有 2 次回流与重绘，而中间所有的代码都不在 dom 树以及渲染树中出现，不会增加重绘和回流的渲染次数</p><p>5.动画 元素 一定要绝对定位，让它脱离标准流，不然出现位置的变化会不断的回流和重绘，采用定位控制元素的方位不对其他节点产生回流与重绘</p><p>6.tabel 布局回流的代价相当大，第一次加载回流的性能就很大，我们应该尽可能不使用 table</p><h3 id="_6-页面渲染过程" tabindex="-1">6.页面渲染过程 <a class="header-anchor" href="#_6-页面渲染过程" aria-label="Permalink to &quot;6.页面渲染过程&quot;">​</a></h3><p><img src="'+e+'" alt="image.png"><br><img src="'+o+`" alt="image.png"><br><a href="https://blog.csdn.net/qq_42647547/category_11206026.html" target="_blank" rel="noreferrer">js 全修班笔记</a></p><h2 id="innerhtml-inertext-textcontent-的区别" tabindex="-1">innerHTML,inerText，textContent 的区别 <a class="header-anchor" href="#innerhtml-inertext-textcontent-的区别" aria-label="Permalink to &quot;innerHTML,inerText，textContent 的区别&quot;">​</a></h2><h3 id="_1-innerhtml" tabindex="-1">1.innerHTML <a class="header-anchor" href="#_1-innerhtml" aria-label="Permalink to &quot;1.innerHTML&quot;">​</a></h3><h4 id="_1-1-执行过程" tabindex="-1">1.1 执行过程 <a class="header-anchor" href="#_1-1-执行过程" aria-label="Permalink to &quot;1.1 执行过程&quot;">​</a></h4><p>当给 innerHTML 设置一个值的时候到底发生了什么？用户代理按照以下步骤：</p><ol><li>给定的值被解析为 HTML 或者 XML（取决于文档类型），结果就是 DocumentFragment 对象代表元素新设置的 DOM 节点。</li><li>如果元素内容被替换成 &lt;template&gt; 元素，&lt;template&gt; 元素的 content 属性会被替换为步骤 1 中创建的新的 DocumentFragment。</li><li>对于其他所有元素，元素的内容都被替换为新的 DocumentFragment 节点。</li></ol><h4 id="_1-2-安全问题" tabindex="-1">1.2 安全问题 <a class="header-anchor" href="#_1-2-安全问题" aria-label="Permalink to &quot;1.2 安全问题&quot;">​</a></h4><p><a href="https://so.csdn.net/so/search?q=HTML5&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">HTML5</a>和现代的新的浏览器都会阻止这种通过 innerHTML 嵌入 script 脚本的程序执行</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// assuming &#39;el&#39; is an HTML DOM element</span></span>
<span class="line"><span style="color:#E1E4E8;">el.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name; </span><span style="color:#6A737D;">// harmless in this case</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;script&gt;alert(&#39;I am John in an annoying alert!&#39;)&lt;/script&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">el.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name; </span><span style="color:#6A737D;">// harmless in this case</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// assuming &#39;el&#39; is an HTML DOM element</span></span>
<span class="line"><span style="color:#24292E;">el.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name; </span><span style="color:#6A737D;">// harmless in this case</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;script&gt;alert(&#39;I am John in an annoying alert!&#39;)&lt;/script&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">el.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name; </span><span style="color:#6A737D;">// harmless in this case</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>尽管这看上去像 <a href="https://zh.wikipedia.org/wiki/cross-site_scripting" target="_blank" rel="noreferrer">cross-site scripting</a> 攻击，结果并不会导致什么。HTML 5 中指定不执行由 innerHTML 插入的 &lt;script&gt;标签。<br>然而，有很多不依赖 &lt;script&gt; 标签去执行 JavaScript 的方式。所以当你使用 innerHTML 去设置你无法控制的字符串时，这仍然是一个安全问题。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;img src=&#39;x&#39; onerror=&#39;alert(1)&#39;&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">el.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name; </span><span style="color:#6A737D;">// shows the alert</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;img src=&#39;x&#39; onerror=&#39;alert(1)&#39;&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">el.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name; </span><span style="color:#6A737D;">// shows the alert</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>基于这个原因，当插入纯文本时，建议不要使用 innerHTML 。取而代之的是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent" target="_blank" rel="noreferrer">Node.textContent</a> ，它不会把给定的内容解析为 HTML，它仅仅是将原始文本插入给定的位置。</p><h4 id="_1-3-优化方案" tabindex="-1">1.3 优化方案 <a class="header-anchor" href="#_1-3-优化方案" aria-label="Permalink to &quot;1.3 优化方案&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tr&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">tr.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;li&gt;11&lt;/li&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">ul.</span><span style="color:#B392F0;">appendchild</span><span style="color:#E1E4E8;">(tr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tr&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">tr.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;li&gt;11&lt;/li&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">ul.</span><span style="color:#6F42C1;">appendchild</span><span style="color:#24292E;">(tr);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样就只是把一个字符串放进了一个 dom 节点里，这个节点是在<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020" target="_blank" rel="noreferrer">内存</a>里面的，并没有在 document 文档</p><h3 id="_2-textcontent" tabindex="-1">2.textContent <a class="header-anchor" href="#_2-textcontent" aria-label="Permalink to &quot;2.textContent&quot;">​</a></h3><h4 id="_2-1与-innertext-的区别" tabindex="-1">2.1<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent#%E4%B8%8E_innertext_%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">与 innerText 的区别</a> <a class="header-anchor" href="#_2-1与-innertext-的区别" aria-label="Permalink to &quot;2.1[与 innerText 的区别](https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent#%E4%B8%8E_innertext_%E7%9A%84%E5%8C%BA%E5%88%AB)&quot;">​</a></h4><p>不要被 Node.textContent 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/innerText" target="_blank" rel="noreferrer">HTMLElement.innerText</a> 的区别搞混了。虽然名字看起来很相似，但有重要的不同之处：</p><ul><li>textContent 会获取<em>所有</em>元素的内容，包括 &lt;script&gt; 和 &lt;style&gt; 元素，然而 innerText 只展示给人看的元素。</li><li>textContent 会返回节点中的每一个元素。相反，innerText 受 CSS 样式的影响，并且不会返回隐藏元素的文本， <ul><li>此外，由于 innerText 受 CSS 样式的影响，它会触发回流（ <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Reflow" target="_blank" rel="noreferrer">reflow</a> ）去确保是最新的计算样式。（回流在计算上可能会非常昂贵，因此应尽可能避免。）</li></ul></li><li>与 textContent 不同的是，在 Internet Explorer (小于和等于 11 的版本) 中对 innerText 进行修改， 不仅会移除当前元素的子节点，而且还会<em>永久性地破坏</em>所有后代文本节点。在之后不可能再次将节点再次插入到任何其他元素或同一元素中。</li><li>优点;当改写 textContent 时，只会将文本插入到元素内部去，性能比 innerHTML 好</li><li>它不会被解析成 dom 节点，只解析为文本节点（减少回流次数）</li></ul><h3 id="_3-innertext" tabindex="-1">3.innerText <a class="header-anchor" href="#_3-innertext" aria-label="Permalink to &quot;3.innerText&quot;">​</a></h3><p>给元素添加文本节点，只会获取给客户看的内容，script，以及 style 将会被隐藏</p><h3 id="_4-总结" tabindex="-1">4.总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4.总结&quot;">​</a></h3><p>innerHTML：性能不好，可以提取文本及 html 标签<br>innerText：性能好，只能提取文本，会剔除 html 标签及 script、style 内容，受 css 影响<br>textContent：性能好，可以提取文本及 script、style 内容，会剔除 html 标签，不受 css 影响</p>`,43),d=[E];function b(m,u,h,A,D,F){return t(),c("div",null,d)}const q=r(y,[["render",b]]);export{C as __pageData,q as default};
