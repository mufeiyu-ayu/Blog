import{_ as t,a as r}from"./chunks/test.f4b1b60a.js";import{_ as o,o as a,c,a4 as e}from"./chunks/framework.f8637b7f.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/DataMonitoring/constructor.md","filePath":"Web/JavaScript/DataMonitoring/constructor.md","lastUpdated":1693864762000}'),s={name:"Web/JavaScript/DataMonitoring/constructor.md"},n=e('<h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>当一个函数 F 被定义时，JS 引擎会为 F 添加 prototype 原型，然后再在 prototype 上添加一个 constructor 属性，并让其指向 F 的引用。如下所示：<br><img src="'+t+'" alt="image.png"><br>当执行 var f = new F() 时，F 被当成了构造函数，f 是 F 的实例对象，此时 F 原型上的 constructor 传递到了 f 上，因此 f.constructor == F<br><img src="'+t+'" alt="image.png"><br>可以看出，F 利用原型对象上的 constructor 引用了自身，当 F 作为构造函数来创建对象时，原型上的 constructor 就被遗传到了新创建的对象上， 从原型链角度讲，构造函数 F 就是新对象的类型。这样做的意义是，让新对象在诞生以后，就具有可追溯的数据类型。<br>同样，JavaScript 中的内置对象在内部构建时也是这样做的：<br></p><p><img src="'+r+'" alt="图片走丢啦"></p>',3),i=[n];function _(p,u,m,d,l,f){return a(),c("div",null,i)}const F=o(s,[["render",_]]);export{h as __pageData,F as default};
